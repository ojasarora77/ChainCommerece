{
  "address": "0x9FF6ECCe1a1EDe9d991aF02292751De6bB2dF38B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EmptyArgs",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptySecrets",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptySource",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoInlineSecrets",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRouterCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "products",
          "type": "string[]"
        }
      ],
      "name": "AIRecommendationFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "query",
          "type": "string"
        }
      ],
      "name": "AIRecommendationRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bedrockSource",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "donId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "handleOracleFulfillment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "recommendations",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "query",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "query",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "preferencesJson",
          "type": "string"
        }
      ],
      "name": "requestAIRecommendation",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_donId",
          "type": "bytes32"
        }
      ],
      "name": "setDonId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_gasLimit",
          "type": "uint32"
        }
      ],
      "name": "setGasLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        }
      ],
      "name": "setSubscriptionId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userRecommendations",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe4fe8ffe16a8f77bf420b17c896f5d017d6cd0cdbc7769e8ac22c9fb7f042068",
  "receipt": {
    "to": null,
    "from": "0x822c480a0D437b6e6276D0AF69DBe7B19B65B599",
    "contractAddress": "0x9FF6ECCe1a1EDe9d991aF02292751De6bB2dF38B",
    "transactionIndex": 1,
    "gasUsed": "2011476",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000008000000000000000010000000000000000000000000000000000000000800000000000000000000100000000000000000000000000000000000000000000000000000000000082000000000000000000000000000000000000000000000000004000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000000020001000000000000000000000000000000100000000000000000000000000000000000010000000000000000000000000000000000100000",
    "blockHash": "0x19c44b6dc899fb37e8b63349bf6c99c4cb84a111c9092e29e60599a2b20d4256",
    "transactionHash": "0xe4fe8ffe16a8f77bf420b17c896f5d017d6cd0cdbc7769e8ac22c9fb7f042068",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 23088139,
        "transactionHash": "0xe4fe8ffe16a8f77bf420b17c896f5d017d6cd0cdbc7769e8ac22c9fb7f042068",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000822c480a0d437b6e6276d0af69dbe7b19b65b599",
          "0x00000000000000000000000009207a6efee346cb3e4a54ac18523e3715d38b3f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000004f18c098f312a680000000000000000000000000000000000000000000000003f8c764cb707fc220000000000000000000000000000000000000000000007a9a5c966f9e72fba020000000000000000000000000000000000000000000000003a9aea4327d6d1ba0000000000000000000000000000000000000000000007a9aabaf3037660e46a",
        "logIndex": 4,
        "blockHash": "0x19c44b6dc899fb37e8b63349bf6c99c4cb84a111c9092e29e60599a2b20d4256"
      }
    ],
    "blockNumber": 23088139,
    "cumulativeGasUsed": "2097788",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC22a79eBA640940ABB6dF0f7982cc119578E11De"
  ],
  "numDeployments": 1,
  "solcInputHash": "5fa7750c0c830ca36e05083f20484923",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EmptyArgs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySecrets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySource\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoInlineSecrets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRouterCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"products\",\"type\":\"string[]\"}],\"name\":\"AIRecommendationFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"query\",\"type\":\"string\"}],\"name\":\"AIRecommendationRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bedrockSource\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"handleOracleFulfillment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"recommendations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"query\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"query\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"preferencesJson\",\"type\":\"string\"}],\"name\":\"requestAIRecommendation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_donId\",\"type\":\"bytes32\"}],\"name\":\"setDonId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_gasLimit\",\"type\":\"uint32\"}],\"name\":\"setGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"}],\"name\":\"setSubscriptionId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userRecommendations\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"details\":\"Either response or error parameter will be set, but never both.\",\"params\":{\"err\":\"Aggregated error either from the request's source code or from the execution pipeline.\",\"requestId\":\"The requestId returned by FunctionsClient.sendRequest().\",\"response\":\"Aggregated response from the request's source code.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"notice\":\"Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AIMarketplace.sol\":\"AIMarketplace\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsRouter} from \\\"./interfaces/IFunctionsRouter.sol\\\";\\nimport {IFunctionsClient} from \\\"./interfaces/IFunctionsClient.sol\\\";\\n\\nimport {FunctionsRequest} from \\\"./libraries/FunctionsRequest.sol\\\";\\n\\n/// @title The Chainlink Functions client contract\\n/// @notice Contract developers can inherit this contract in order to make Chainlink Functions requests\\nabstract contract FunctionsClient is IFunctionsClient {\\n  using FunctionsRequest for FunctionsRequest.Request;\\n\\n  IFunctionsRouter internal immutable i_router;\\n\\n  event RequestSent(bytes32 indexed id);\\n  event RequestFulfilled(bytes32 indexed id);\\n\\n  error OnlyRouterCanFulfill();\\n\\n  constructor(address router) {\\n    i_router = IFunctionsRouter(router);\\n  }\\n\\n  /// @notice Sends a Chainlink Functions request\\n  /// @param data The CBOR encoded bytes data for a Functions request\\n  /// @param subscriptionId The subscription ID that will be charged to service the request\\n  /// @param callbackGasLimit the amount of gas that will be available for the fulfillment callback\\n  /// @return requestId The generated request ID for this request\\n  function _sendRequest(\\n    bytes memory data,\\n    uint64 subscriptionId,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) internal returns (bytes32) {\\n    bytes32 requestId = i_router.sendRequest(\\n      subscriptionId,\\n      data,\\n      FunctionsRequest.REQUEST_DATA_VERSION,\\n      callbackGasLimit,\\n      donId\\n    );\\n    emit RequestSent(requestId);\\n    return requestId;\\n  }\\n\\n  /// @notice User defined function to handle a response from the DON\\n  /// @param requestId The request ID, returned by sendRequest()\\n  /// @param response Aggregated response from the execution of the user's source code\\n  /// @param err Aggregated error from the execution of the user code or from the execution pipeline\\n  /// @dev Either response or error parameter will be set, but never both\\n  function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal virtual;\\n\\n  /// @inheritdoc IFunctionsClient\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external override {\\n    if (msg.sender != address(i_router)) {\\n      revert OnlyRouterCanFulfill();\\n    }\\n    fulfillRequest(requestId, response, err);\\n    emit RequestFulfilled(requestId);\\n  }\\n}\\n\",\"keccak256\":\"0x40224641403cb9fa03d4f060296d7420a9ff11b46abadc958ae048459205e397\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Chainlink Functions client interface.\\ninterface IFunctionsClient {\\n  /// @notice Chainlink Functions response handler called by the Functions Router\\n  /// during fullilment from the designated transmitter node in an OCR round.\\n  /// @param requestId The requestId returned by FunctionsClient.sendRequest().\\n  /// @param response Aggregated response from the request's source code.\\n  /// @param err Aggregated error either from the request's source code or from the execution pipeline.\\n  /// @dev Either response or error parameter will be set, but never both.\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external;\\n}\\n\",\"keccak256\":\"0x6117b82e7c4eec44ce557b0fc8bc1ac5f49e5d160ac6d4485452d6aafdd762ff\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Router interface.\\ninterface IFunctionsRouter {\\n  /// @notice The identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  /// @return id - bytes32 id that can be passed to the \\\"getContractById\\\" of the Router\\n  function getAllowListId() external view returns (bytes32);\\n\\n  /// @notice Set the identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  function setAllowListId(bytes32 allowListId) external;\\n\\n  /// @notice Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\\n  /// @return adminFee\\n  function getAdminFee() external view returns (uint72 adminFee);\\n\\n  /// @notice Sends a request using the provided subscriptionId\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Sends a request to the proposed contracts\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequestToProposed(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Fulfill the request by:\\n  /// - calling back the data that the Oracle returned to the client contract\\n  /// - pay the DON for processing the request\\n  /// @dev Only callable by the Coordinator contract that is saved in the commitment\\n  /// @param response response data from DON consensus\\n  /// @param err error from DON consensus\\n  /// @param juelsPerGas - current rate of juels/gas\\n  /// @param costWithoutFulfillment - The cost of processing the request (in Juels of LINK ), without fulfillment\\n  /// @param transmitter - The Node that transmitted the OCR report\\n  /// @param commitment - The parameters of the request that must be held consistent between request and response time\\n  /// @return fulfillResult -\\n  /// @return callbackGasCostJuels -\\n  function fulfill(\\n    bytes memory response,\\n    bytes memory err,\\n    uint96 juelsPerGas,\\n    uint96 costWithoutFulfillment,\\n    address transmitter,\\n    FunctionsResponse.Commitment memory commitment\\n  ) external returns (FunctionsResponse.FulfillResult, uint96);\\n\\n  /// @notice Validate requested gas limit is below the subscription max.\\n  /// @param subscriptionId subscription ID\\n  /// @param callbackGasLimit desired callback gas limit\\n  function isValidCallbackGasLimit(uint64 subscriptionId, uint32 callbackGasLimit) external view;\\n\\n  /// @notice Get the current contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current contract address\\n  function getContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Get the proposed next contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current or proposed contract address\\n  function getProposedContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Return the latest proprosal set\\n  /// @return ids The identifiers of the contracts to update\\n  /// @return to The addresses of the contracts that will be updated to\\n  function getProposedContractSet() external view returns (bytes32[] memory, address[] memory);\\n\\n  /// @notice Proposes one or more updates to the contract routes\\n  /// @dev Only callable by owner\\n  function proposeContractsUpdate(bytes32[] memory proposalSetIds, address[] memory proposalSetAddresses) external;\\n\\n  /// @notice Updates the current contract routes to the proposed contracts\\n  /// @dev Only callable by owner\\n  function updateContracts() external;\\n\\n  /// @dev Puts the system into an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function pause() external;\\n\\n  /// @dev Takes the system out of an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0x44db41e8ff90c2828ca0ada125abc4b411921a86514a4a047fd9fd43ba9d7e08\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {CBOR} from \\\"../../../vendor/solidity-cborutils/v2.0.0/CBOR.sol\\\";\\n\\n/// @title Library for encoding the input data of a Functions request into CBOR\\nlibrary FunctionsRequest {\\n  using CBOR for CBOR.CBORBuffer;\\n\\n  uint16 public constant REQUEST_DATA_VERSION = 1;\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  enum Location {\\n    Inline, // Provided within the Request\\n    Remote, // Hosted through remote location that can be accessed through a provided URL\\n    DONHosted // Hosted on the DON's storage\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of the source code that will be executed on each node in the DON\\n    Location secretsLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of secrets that will be passed into the source code. *Only Remote secrets are supported\\n    CodeLanguage language; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The coding language that the source code is written in\\n    string source; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Raw source code for Request.codeLocation of Location.Inline, URL for Request.codeLocation of Location.Remote, or slot decimal number for Request.codeLocation of Location.DONHosted\\n    bytes encryptedSecretsReference; // \\u2550\\u2550\\u2578 Encrypted URLs for Request.secretsLocation of Location.Remote (use addSecretsReference()), or CBOR encoded slotid+version for Request.secretsLocation of Location.DONHosted (use addDONHostedSecrets())\\n    string[] args; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 String arguments that will be passed into the source code\\n    bytes[] bytesArgs; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Bytes arguments that will be passed into the source code\\n  }\\n\\n  error EmptySource();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n  error NoInlineSecrets();\\n\\n  /// @notice Encodes a Request to CBOR encoded bytes\\n  /// @param self The request to encode\\n  /// @return CBOR encoded bytes\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"codeLocation\\\");\\n    buffer.writeUInt256(uint256(self.codeLocation));\\n\\n    buffer.writeString(\\\"language\\\");\\n    buffer.writeUInt256(uint256(self.language));\\n\\n    buffer.writeString(\\\"source\\\");\\n    buffer.writeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buffer.writeString(\\\"args\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.args.length; ++i) {\\n        buffer.writeString(self.args[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    if (self.encryptedSecretsReference.length > 0) {\\n      if (self.secretsLocation == Location.Inline) {\\n        revert NoInlineSecrets();\\n      }\\n      buffer.writeString(\\\"secretsLocation\\\");\\n      buffer.writeUInt256(uint256(self.secretsLocation));\\n      buffer.writeString(\\\"secrets\\\");\\n      buffer.writeBytes(self.encryptedSecretsReference);\\n    }\\n\\n    if (self.bytesArgs.length > 0) {\\n      buffer.writeString(\\\"bytesArgs\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.bytesArgs.length; ++i) {\\n        buffer.writeBytes(self.bytesArgs[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    return buffer.buf.buf;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Sets the codeLocation and code on the request\\n  /// @param self The uninitialized request\\n  /// @param codeLocation The user provided source code location\\n  /// @param language The programming language of the user code\\n  /// @param source The user provided source code or a url\\n  function initializeRequest(\\n    Request memory self,\\n    Location codeLocation,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = codeLocation;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Simplified version of initializeRequest for PoC\\n  /// @param self The uninitialized request\\n  /// @param javaScriptSource The user provided JS code (must not be empty)\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /// @notice Adds Remote user encrypted secrets to a Request\\n  /// @param self The initialized request\\n  /// @param encryptedSecretsReference Encrypted comma-separated string of URLs pointing to off-chain secrets\\n  function addSecretsReference(Request memory self, bytes memory encryptedSecretsReference) internal pure {\\n    if (encryptedSecretsReference.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Remote;\\n    self.encryptedSecretsReference = encryptedSecretsReference;\\n  }\\n\\n  /// @notice Adds DON-hosted secrets reference to a Request\\n  /// @param self The initialized request\\n  /// @param slotID Slot ID of the user's secrets hosted on DON\\n  /// @param version User data version (for the slotID)\\n  function addDONHostedSecrets(Request memory self, uint8 slotID, uint64 version) internal pure {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"slotID\\\");\\n    buffer.writeUInt64(slotID);\\n    buffer.writeString(\\\"version\\\");\\n    buffer.writeUInt64(version);\\n\\n    self.secretsLocation = Location.DONHosted;\\n    self.encryptedSecretsReference = buffer.buf.buf;\\n  }\\n\\n  /// @notice Sets args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of string args (must not be empty)\\n  function setArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n\\n  /// @notice Sets bytes args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of bytes args (must not be empty)\\n  function setBytesArgs(Request memory self, bytes[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.bytesArgs = args;\\n  }\\n}\\n\",\"keccak256\":\"0xed75be0eaba358d468f1fe18adc377d5044f57eff0070081f884a1f212d0adc2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Library of types that are used for fulfillment of a Functions request\\nlibrary FunctionsResponse {\\n  // Used to send request information from the Router to the Coordinator\\n  struct RequestMeta {\\n    bytes data; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n    address requestingContract; // \\u2550\\u2550\\u2557 The client contract that is sending the request\\n    uint96 availableBalance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u255d Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint64 subscriptionId; //        \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint64 initiatedRequests; //     \\u2551 The number of requests that have been started\\n    uint32 callbackGasLimit; //      \\u2551 The amount of gas that the callback to the consuming contract will be given\\n    uint16 dataVersion; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The version of the structure of the CBOR encoded request data\\n    uint64 completedRequests; // \\u2550\\u2550\\u2550\\u2550\\u2557 The number of requests that have successfully completed or timed out\\n    address subscriptionOwner; // \\u2550\\u2550\\u2550\\u255d The owner of the billing subscription\\n  }\\n\\n  enum FulfillResult {\\n    FULFILLED, // 0\\n    USER_CALLBACK_ERROR, // 1\\n    INVALID_REQUEST_ID, // 2\\n    COST_EXCEEDS_COMMITMENT, // 3\\n    INSUFFICIENT_GAS_PROVIDED, // 4\\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\\n    INVALID_COMMITMENT // 6\\n  }\\n\\n  struct Commitment {\\n    bytes32 requestId; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 A unique identifier for a Chainlink Functions request\\n    address coordinator; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The Coordinator contract that manages the DON that is servicing a request\\n    uint96 estimatedTotalCostJuels; // \\u2550\\u2550\\u2550\\u2550\\u255d The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\\n    address client; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The client contract that sent the request\\n    uint64 subscriptionId; //              \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint32 callbackGasLimit; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The amount of gas that the callback to the consuming contract will be given\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint72 donFee; //                      \\u2551 Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\\n    uint40 gasOverheadBeforeCallback; //   \\u2551 Represents the average gas execution cost before the fulfillment callback.\\n    uint40 gasOverheadAfterCallback; //    \\u2551 Represents the average gas execution cost after the fulfillment callback.\\n    uint32 timeoutTimestamp; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The timestamp at which a request will be eligible to be timed out\\n  }\\n}\\n\",\"keccak256\":\"0xc72eb037effef32146f7cd4086af00f44f28c8649d891e5e404fec5fda7e802b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\",\"keccak256\":\"0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0\",\"license\":\"BSD-2-Clause\"},\"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../@ensdomains/buffer/v0.1.0/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xdecf04203502670ac72ba466c75e4f87f4419907365005f0d73e7d07ee3e5715\",\"license\":\"MIT\"},\"contracts/AIMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsClient} from \\\"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol\\\";\\nimport {FunctionsRequest} from \\\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol\\\";\\n\\ncontract AIMarketplace is FunctionsClient {\\n    using FunctionsRequest for FunctionsRequest.Request;\\n\\n    struct AIRecommendation {\\n        address user;\\n        string query;\\n        uint256 timestamp;\\n        bytes32 requestId;\\n        string[] recommendedProducts;\\n        uint256[] sustainabilityScores;\\n    }\\n\\n    mapping(bytes32 => AIRecommendation) public recommendations;\\n    mapping(address => bytes32[]) public userRecommendations;\\n\\n    uint64 public subscriptionId;\\n    uint32 public gasLimit = 300000;\\n    bytes32 public donId; // Chainlink Functions DON ID\\n\\n    string public bedrockSource = \\n        \\\"const query = args[0];\\\"\\n        \\\"const preferences = JSON.parse(args[1]);\\\"\\n        \\\"const apiKey = secrets.AWS_ACCESS_KEY;\\\"\\n        \\\"const secretKey = secrets.AWS_SECRET_KEY;\\\"\\n        \\\"\\\"\\n        \\\"// Call Amazon Bedrock API\\\"\\n        \\\"const bedrockResponse = await Functions.makeHttpRequest({\\\"\\n        \\\"  url: 'https://bedrock-runtime.us-east-1.amazonaws.com/model/anthropic.claude-3-haiku-20240307-v1:0/invoke',\\\"\\n        \\\"  method: 'POST',\\\"\\n        \\\"  headers: {\\\"\\n        \\\"    'Content-Type': 'application/json',\\\"\\n        \\\"    'Authorization': `AWS4-HMAC-SHA256 Credential=${apiKey}/...`\\\"\\n        \\\"  },\\\"\\n        \\\"  data: {\\\"\\n        \\\"    prompt: `Find sustainable products: ${query}`,\\\"\\n        \\\"    max_tokens: 1000\\\"\\n        \\\"  }\\\"\\n        \\\"});\\\"\\n        \\\"\\\"\\n        \\\"return Functions.encodeString(JSON.stringify(bedrockResponse.data));\\\";\\n\\n    event AIRecommendationRequested(\\n        address indexed user,\\n        bytes32 indexed requestId,\\n        string query\\n    );\\n\\n    event AIRecommendationFulfilled(\\n        address indexed user,\\n        bytes32 indexed requestId,\\n        string[] products\\n    );\\n\\n    constructor(address router) FunctionsClient(router) {}\\n\\n    function requestAIRecommendation(\\n        string memory query,\\n        string memory preferencesJson\\n    ) external returns (bytes32 requestId) {\\n        FunctionsRequest.Request memory req;\\n        req.initializeRequestForInlineJavaScript(bedrockSource);\\n        \\n        string[] memory args = new string[](2);\\n        args[0] = query;\\n        args[1] = preferencesJson;\\n        req.setArgs(args);\\n\\n        // Add AWS credentials as encrypted secrets\\n        req.addSecretsReference(\\\"AWS_ACCESS_KEY\\\");\\n        req.addSecretsReference(\\\"AWS_SECRET_KEY\\\");\\n        \\n        requestId = _sendRequest(\\n            req.encodeCBOR(),\\n            subscriptionId,\\n            gasLimit,\\n            donId\\n        );\\n\\n        recommendations[requestId] = AIRecommendation({\\n            user: msg.sender,\\n            query: query,\\n            timestamp: block.timestamp,\\n            requestId: requestId,\\n            recommendedProducts: new string[](0),\\n            sustainabilityScores: new uint256[](0)\\n        });\\n\\n        userRecommendations[msg.sender].push(requestId);\\n        \\n        emit AIRecommendationRequested(msg.sender, requestId, query);\\n    }\\n\\n    function fulfillRequest(\\n        bytes32 requestId,\\n        bytes memory response,\\n        bytes memory err\\n    ) internal override {\\n        AIRecommendation storage rec = recommendations[requestId];\\n        \\n        if (err.length > 0) {\\n            // Handle error\\n            return;\\n        }\\n\\n        // Parse response and update recommendation\\n        // This is simplified - actual implementation would parse JSON\\n        string memory responseStr = string(response);\\n        \\n        // Update recommendation with parsed data\\n        rec.recommendedProducts = parseProducts(responseStr);\\n        rec.sustainabilityScores = parseScores(responseStr);\\n        \\n        emit AIRecommendationFulfilled(\\n            rec.user,\\n            requestId,\\n            rec.recommendedProducts\\n        );\\n    }\\n\\n    // Helper functions to parse response (implement based on response format)\\n    function parseProducts(string memory response) internal pure returns (string[] memory) {\\n        // Implementation needed\\n        string[] memory products = new string[](1);\\n        products[0] = \\\"Sustainable Product\\\";\\n        return products;\\n    }\\n\\n    function parseScores(string memory response) internal pure returns (uint256[] memory) {\\n        // Implementation needed\\n        uint256[] memory scores = new uint256[](1);\\n        scores[0] = 85;\\n        return scores;\\n    }\\n\\n    // Admin functions\\n    function setSubscriptionId(uint64 _subscriptionId) external {\\n        subscriptionId = _subscriptionId;\\n    }\\n\\n    function setDonId(bytes32 _donId) external {\\n        donId = _donId;\\n    }\\n\\n    function setGasLimit(uint32 _gasLimit) external {\\n        gasLimit = _gasLimit;\\n    }\\n}\\n\",\"keccak256\":\"0x11072591bb2a9be44095daaf720bc2586b4ea5b57291afd40bf0439ed1a74933\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6002805463ffffffff60401b19166a0493e0000000000000000017905561034060405261026e60a08181529062001c8b60c03960049062000041908262000129565b503480156200004f57600080fd5b5060405162001ef938038062001ef98339810160408190526200007291620001f5565b6001600160a01b031660805262000227565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000af57607f821691505b602082108103620000d057634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200012457600081815260208120601f850160051c81016020861015620000ff5750805b601f850160051c820191505b8181101562000120578281556001016200010b565b5050505b505050565b81516001600160401b0381111562000145576200014562000084565b6200015d816200015684546200009a565b84620000d6565b602080601f8311600181146200019557600084156200017c5750858301515b600019600386901b1c1916600185901b17855562000120565b600085815260208120601f198616915b82811015620001c657888601518255948401946001909101908401620001a5565b5085821015620001e55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000602082840312156200020857600080fd5b81516001600160a01b03811681146200022057600080fd5b9392505050565b608051611a416200024a6000396000818161021c0152610b870152611a416000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638dbe7b9d116100715780638dbe7b9d14610160578063c0b6391a14610169578063d831c4721461018c578063ea7b4f771461019f578063eed06a1f146101d0578063f68016b7146101e557600080fd5b806309c1ba2e146100ae5780630ca76175146100de5780632d22a2f9146100f357806352d84c621461011457806378ca5de71461014d575b600080fd5b6002546100c1906001600160401b031681565b6040516001600160401b0390911681526020015b60405180910390f35b6100f16100ec3660046113e7565b610211565b005b610106610101366004611453565b610295565b6040519081526020016100d5565b6100f161012236600461148b565b6002805463ffffffff909216600160401b026bffffffff000000000000000019909216919091179055565b6100f161015b3660046114b1565b600355565b61010660035481565b61017c6101773660046114b1565b6102c6565b6040516100d59493929190611510565b61010661019a366004611547565b610381565b6100f16101ad3660046115aa565b6002805467ffffffffffffffff19166001600160401b0392909216919091179055565b6101d8610704565b6040516100d591906115d3565b6002546101fc90600160401b900463ffffffff1681565b60405163ffffffff90911681526020016100d5565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461025a5760405163c6829f8360e01b815260040160405180910390fd5b610265838383610792565b60405183907f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e690600090a2505050565b600160205281600052604060002081815481106102b157600080fd5b90600052602060002001600091509150505481565b600060208190529081526040902080546001820180546001600160a01b0390921692916102f2906115e6565b80601f016020809104026020016040519081016040528092919081815260200182805461031e906115e6565b801561036b5780601f106103405761010080835404028352916020019161036b565b820191906000526020600020905b81548152906001019060200180831161034e57829003601f168201915b5050505050908060020154908060030154905084565b60006103c46040805160e0810190915280600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b610461600480546103d4906115e6565b80601f0160208091040260200160405190810160405280929190818152602001828054610400906115e6565b801561044d5780601f106104225761010080835404028352916020019161044d565b820191906000526020600020905b81548152906001019060200180831161043057829003601f168201915b50505050508261083e90919063ffffffff16565b60408051600280825260608201909252600091816020015b606081526020019060019003908161047957905050905084816000815181106104a4576104a4611620565b602002602001018190525083816001815181106104c3576104c3611620565b60209081029190910101526104d8828261084f565b60408051808201909152600e81526d4157535f4143434553535f4b455960901b6020820152610508908390610879565b60408051808201909152600e81526d4157535f5345435245545f4b455960901b6020820152610538908390610879565b610568610544836108aa565b6002546003546001600160401b03821691600160401b900463ffffffff1690610b82565b92506040518060c00160405280336001600160a01b0316815260200186815260200142815260200184815260200160006001600160401b038111156105af576105af611345565b6040519080825280602002602001820160405280156105e257816020015b60608152602001906001900390816105cd5790505b5081526020016000604051908082528060200260200182016040528015610613578160200160208202803683370190505b509052600084815260208181526040909120825181546001600160a01b0319166001600160a01b039091161781559082015160018201906106549082611684565b50604082015160028201556060820151600382015560808201518051610684916004840191602090910190611204565b5060a082015180516106a091600584019160209091019061125a565b5050336000818152600160208181526040808420805493840181558452922001869055518592507fdaf10ce978b51235f131b972c21e0ec793e2b114d2b88650ed00326539e6a3d3906106f49089906115d3565b60405180910390a3505092915050565b60048054610711906115e6565b80601f016020809104026020016040519081016040528092919081815260200182805461073d906115e6565b801561078a5780601f1061075f5761010080835404028352916020019161078a565b820191906000526020600020905b81548152906001019060200180831161076d57829003601f168201915b505050505081565b60008381526020819052604090208151156107ad5750505050565b826107b781610c54565b80516107cd916004850191602090910190611204565b506107d781610cd6565b80516107ed91600585019160209091019061125a565b50815460405186916001600160a01b0316907f30d9d4d72a10f669e7876e3a34fad92274e934bdfd62a43bb54d6af015e275e49061082f906004870190611743565b60405180910390a35050505050565b61084b8260008084610d11565b5050565b80516000036108715760405163fe936cb760e01b815260040160405180910390fd5b60a090910152565b805160000361089b5760405163e889636f60e01b815260040160405180910390fd5b60016020830152608090910152565b606060006108b9610100610d8f565b90506108f26040518060400160405280600c81526020016b31b7b232a637b1b0ba34b7b760a11b81525082610db090919063ffffffff16565b825161091090600281111561090957610909611815565b8290610dce565b6040805180820190915260088152676c616e677561676560c01b602082015261093a908290610db0565b604083015161095190801561090957610909611815565b604080518082019091526006815265736f7572636560d01b6020820152610979908290610db0565b6060830151610989908290610db0565b60a08301515115610a1d576040805180820190915260048152636172677360e01b60208201526109ba908290610db0565b6109c381610e07565b60005b8360a0015151811015610a1357610a038460a0015182815181106109ec576109ec611620565b602002602001015183610db090919063ffffffff16565b610a0c81611841565b90506109c6565b50610a1d81610e2b565b60808301515115610ae157600083602001516002811115610a4057610a40611815565b03610a5e5760405163a80d31f760e01b815260040160405180910390fd5b60408051808201909152600f81526e39b2b1b932ba39a637b1b0ba34b7b760891b6020820152610a8f908290610db0565b610aa88360200151600281111561090957610909611815565b6040805180820190915260078152667365637265747360c81b6020820152610ad1908290610db0565b6080830151610ae1908290610e49565b60c08301515115610b7a5760408051808201909152600981526862797465734172677360b81b6020820152610b17908290610db0565b610b2081610e07565b60005b8360c0015151811015610b7057610b608460c001518281518110610b4957610b49611620565b602002602001015183610e4990919063ffffffff16565b610b6981611841565b9050610b23565b50610b7a81610e2b565b515192915050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663461d27628688600188886040518663ffffffff1660e01b8152600401610bda95949392919061185a565b6020604051808303816000875af1158015610bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1d91906118a3565b60405190915081907f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db890600090a295945050505050565b60408051600180825281830190925260609160009190816020015b6060815260200190600190039081610c6f5790505090506040518060400160405280601381526020017214dd5cdd185a5b98589b1948141c9bd91d58dd606a1b81525081600081518110610cc557610cc5611620565b602090810291909101015292915050565b6040805160018082528183019092526060916000919060208083019080368337019050509050605581600081518110610cc557610cc5611620565b8051600003610d33576040516322ce3edd60e01b815260040160405180910390fd5b83836002811115610d4657610d46611815565b90816002811115610d5957610d59611815565b90525060408401828015610d6f57610d6f611815565b90818015610d7f57610d7f611815565b9052506060909301929092525050565b610d976112a1565b8051610da39083610e56565b5060006020820152919050565b610dbd8260038351610ed0565b8151610dc99082610fef565b505050565b8151610ddb9060c2611017565b5061084b8282604051602001610df391815260200190565b604051602081830303815290604052610e49565b610e12816004611080565b600181602001818151610e2591906118bc565b90525050565b610e36816007611080565b600181602001818151610e2591906118cf565b610dbd8260028351610ed0565b604080518082019091526060815260006020820152610e766020836118e2565b15610e9e57610e866020836118e2565b610e919060206118cf565b610e9b90836118bc565b91505b602080840183905260405180855260008152908184010181811015610ec257600080fd5b604052508290505b92915050565b6017816001600160401b031611610efc578251610ef69060e0600585901b168317611017565b50505050565b60ff816001600160401b031611610f3c578251610f24906018611fe0600586901b1617611017565b508251610ef6906001600160401b0383166001611097565b61ffff816001600160401b031611610f7d578251610f65906019611fe0600586901b1617611017565b508251610ef6906001600160401b0383166002611097565b63ffffffff816001600160401b031611610fc0578251610fa890601a611fe0600586901b1617611017565b508251610ef6906001600160401b0383166004611097565b8251610fd790601b611fe0600586901b1617611017565b508251610ef6906001600160401b0383166008611097565b6040805180820190915260608152600060208201526110108383845161111c565b9392505050565b604080518082019091526060815260006020820152825151600061103c8260016118bc565b90508460200151821061105d5761105d85611058836002611904565b6111ed565b8451602083820101858153508051821115611076578181525b5093949350505050565b8151610dc990601f611fe0600585901b1617611017565b60408051808201909152606081526000602082015283515160006110bb82856118bc565b905085602001518111156110d8576110d886611058836002611904565b600060016110e8866101006119ff565b6110f291906118cf565b90508651828101878319825116178152508051831115611110578281525b50959695505050505050565b604080518082019091526060815260006020820152825182111561113f57600080fd5b835151600061114e84836118bc565b9050856020015181111561116b5761116b86611058836002611904565b855180518382016020019160009180851115611185578482525b505050602086015b602086106111c557805182526111a46020836118bc565b91506111b16020826118bc565b90506111be6020876118cf565b955061118d565b51815160001960208890036101000a0190811690199190911617905250849150509392505050565b81516111f98383610e56565b50610ef68382610fef565b82805482825590600052602060002090810192821561124a579160200282015b8281111561124a578251829061123a9082611684565b5091602001919060010190611224565b506112569291506112d6565b5090565b828054828255906000526020600020908101928215611295579160200282015b8281111561129557825182559160200191906001019061127a565b506112569291506112f3565b60405180604001604052806112c9604051806040016040528060608152602001600081525090565b8152602001600081525090565b808211156112565760006112ea8282611308565b506001016112d6565b5b8082111561125657600081556001016112f4565b508054611314906115e6565b6000825580601f10611324575050565b601f01602090049060005260206000209081019061134291906112f3565b50565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261136c57600080fd5b81356001600160401b038082111561138657611386611345565b604051601f8301601f19908116603f011681019082821181831017156113ae576113ae611345565b816040528381528660208588010111156113c757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000606084860312156113fc57600080fd5b8335925060208401356001600160401b038082111561141a57600080fd5b6114268783880161135b565b9350604086013591508082111561143c57600080fd5b506114498682870161135b565b9150509250925092565b6000806040838503121561146657600080fd5b82356001600160a01b038116811461147d57600080fd5b946020939093013593505050565b60006020828403121561149d57600080fd5b813563ffffffff8116811461101057600080fd5b6000602082840312156114c357600080fd5b5035919050565b6000815180845260005b818110156114f0576020818501810151868301820152016114d4565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b0385168152608060208201819052600090611534908301866114ca565b6040830194909452506060015292915050565b6000806040838503121561155a57600080fd5b82356001600160401b038082111561157157600080fd5b61157d8683870161135b565b9350602085013591508082111561159357600080fd5b506115a08582860161135b565b9150509250929050565b6000602082840312156115bc57600080fd5b81356001600160401b038116811461101057600080fd5b60208152600061101060208301846114ca565b600181811c908216806115fa57607f821691505b60208210810361161a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b601f821115610dc957600081815260208120601f850160051c8101602086101561165d5750805b601f850160051c820191505b8181101561167c57828155600101611669565b505050505050565b81516001600160401b0381111561169d5761169d611345565b6116b1816116ab84546115e6565b84611636565b602080601f8311600181146116e657600084156116ce5750858301515b600019600386901b1c1916600185901b17855561167c565b600085815260208120601f198616915b82811015611715578886015182559484019460019091019084016116f6565b50858210156117335787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000602080830181845280855480835260408601915060059250604081841b8701016000888152858120815b8481101561180657603f198a850301865282825461178c816115e6565b808752600182811680156117a757600181146117c0576117ef565b60ff198416898e01528215158c1b89018d0194506117ef565b8688528c8820885b848110156117e75781548f828d01015283820191508e810190506117c8565b8a018e019550505b50988b01989296505050919091019060010161176f565b50919998505050505050505050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016118535761185361182b565b5060010190565b6001600160401b038616815260a06020820152600061187c60a08301876114ca565b61ffff9590951660408301525063ffffffff92909216606083015260809091015292915050565b6000602082840312156118b557600080fd5b5051919050565b80820180821115610eca57610eca61182b565b81810381811115610eca57610eca61182b565b6000826118ff57634e487b7160e01b600052601260045260246000fd5b500690565b8082028115828204841417610eca57610eca61182b565b600181815b8085111561195657816000190482111561193c5761193c61182b565b8085161561194957918102915b93841c9390800290611920565b509250929050565b60008261196d57506001610eca565b8161197a57506000610eca565b8160018114611990576002811461199a576119b6565b6001915050610eca565b60ff8411156119ab576119ab61182b565b50506001821b610eca565b5060208310610133831016604e8410600b84101617156119d9575081810a610eca565b6119e3838361191b565b80600019048211156119f7576119f761182b565b029392505050565b6000611010838361195e56fea26469706673582212201213cee8b02687402221cf4b3bd35d4af80c8a6b3555c8af90cad6c0372c3de564736f6c63430008140033636f6e7374207175657279203d20617267735b305d3b636f6e737420707265666572656e636573203d204a534f4e2e706172736528617267735b315d293b636f6e7374206170694b6579203d20736563726574732e4157535f4143434553535f4b45593b636f6e7374207365637265744b6579203d20736563726574732e4157535f5345435245545f4b45593b2f2f2043616c6c20416d617a6f6e20426564726f636b20415049636f6e737420626564726f636b526573706f6e7365203d2061776169742046756e6374696f6e732e6d616b654874747052657175657374287b202075726c3a202768747470733a2f2f626564726f636b2d72756e74696d652e75732d656173742d312e616d617a6f6e6177732e636f6d2f6d6f64656c2f616e7468726f7069632e636c617564652d332d6861696b752d32303234303330372d76313a302f696e766f6b65272c20206d6574686f643a2027504f5354272c2020686561646572733a207b2020202027436f6e74656e742d54797065273a20276170706c69636174696f6e2f6a736f6e272c2020202027417574686f72697a6174696f6e273a2060415753342d484d41432d5348413235362043726564656e7469616c3d247b6170694b65797d2f2e2e2e6020207d2c2020646174613a207b2020202070726f6d70743a206046696e64207375737461696e61626c652070726f64756374733a20247b71756572797d602c202020206d61785f746f6b656e733a203130303020207d7d293b72657475726e2046756e6374696f6e732e656e636f6465537472696e67284a534f4e2e737472696e6769667928626564726f636b526573706f6e73652e6461746129293b",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80638dbe7b9d116100715780638dbe7b9d14610160578063c0b6391a14610169578063d831c4721461018c578063ea7b4f771461019f578063eed06a1f146101d0578063f68016b7146101e557600080fd5b806309c1ba2e146100ae5780630ca76175146100de5780632d22a2f9146100f357806352d84c621461011457806378ca5de71461014d575b600080fd5b6002546100c1906001600160401b031681565b6040516001600160401b0390911681526020015b60405180910390f35b6100f16100ec3660046113e7565b610211565b005b610106610101366004611453565b610295565b6040519081526020016100d5565b6100f161012236600461148b565b6002805463ffffffff909216600160401b026bffffffff000000000000000019909216919091179055565b6100f161015b3660046114b1565b600355565b61010660035481565b61017c6101773660046114b1565b6102c6565b6040516100d59493929190611510565b61010661019a366004611547565b610381565b6100f16101ad3660046115aa565b6002805467ffffffffffffffff19166001600160401b0392909216919091179055565b6101d8610704565b6040516100d591906115d3565b6002546101fc90600160401b900463ffffffff1681565b60405163ffffffff90911681526020016100d5565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461025a5760405163c6829f8360e01b815260040160405180910390fd5b610265838383610792565b60405183907f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e690600090a2505050565b600160205281600052604060002081815481106102b157600080fd5b90600052602060002001600091509150505481565b600060208190529081526040902080546001820180546001600160a01b0390921692916102f2906115e6565b80601f016020809104026020016040519081016040528092919081815260200182805461031e906115e6565b801561036b5780601f106103405761010080835404028352916020019161036b565b820191906000526020600020905b81548152906001019060200180831161034e57829003601f168201915b5050505050908060020154908060030154905084565b60006103c46040805160e0810190915280600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b610461600480546103d4906115e6565b80601f0160208091040260200160405190810160405280929190818152602001828054610400906115e6565b801561044d5780601f106104225761010080835404028352916020019161044d565b820191906000526020600020905b81548152906001019060200180831161043057829003601f168201915b50505050508261083e90919063ffffffff16565b60408051600280825260608201909252600091816020015b606081526020019060019003908161047957905050905084816000815181106104a4576104a4611620565b602002602001018190525083816001815181106104c3576104c3611620565b60209081029190910101526104d8828261084f565b60408051808201909152600e81526d4157535f4143434553535f4b455960901b6020820152610508908390610879565b60408051808201909152600e81526d4157535f5345435245545f4b455960901b6020820152610538908390610879565b610568610544836108aa565b6002546003546001600160401b03821691600160401b900463ffffffff1690610b82565b92506040518060c00160405280336001600160a01b0316815260200186815260200142815260200184815260200160006001600160401b038111156105af576105af611345565b6040519080825280602002602001820160405280156105e257816020015b60608152602001906001900390816105cd5790505b5081526020016000604051908082528060200260200182016040528015610613578160200160208202803683370190505b509052600084815260208181526040909120825181546001600160a01b0319166001600160a01b039091161781559082015160018201906106549082611684565b50604082015160028201556060820151600382015560808201518051610684916004840191602090910190611204565b5060a082015180516106a091600584019160209091019061125a565b5050336000818152600160208181526040808420805493840181558452922001869055518592507fdaf10ce978b51235f131b972c21e0ec793e2b114d2b88650ed00326539e6a3d3906106f49089906115d3565b60405180910390a3505092915050565b60048054610711906115e6565b80601f016020809104026020016040519081016040528092919081815260200182805461073d906115e6565b801561078a5780601f1061075f5761010080835404028352916020019161078a565b820191906000526020600020905b81548152906001019060200180831161076d57829003601f168201915b505050505081565b60008381526020819052604090208151156107ad5750505050565b826107b781610c54565b80516107cd916004850191602090910190611204565b506107d781610cd6565b80516107ed91600585019160209091019061125a565b50815460405186916001600160a01b0316907f30d9d4d72a10f669e7876e3a34fad92274e934bdfd62a43bb54d6af015e275e49061082f906004870190611743565b60405180910390a35050505050565b61084b8260008084610d11565b5050565b80516000036108715760405163fe936cb760e01b815260040160405180910390fd5b60a090910152565b805160000361089b5760405163e889636f60e01b815260040160405180910390fd5b60016020830152608090910152565b606060006108b9610100610d8f565b90506108f26040518060400160405280600c81526020016b31b7b232a637b1b0ba34b7b760a11b81525082610db090919063ffffffff16565b825161091090600281111561090957610909611815565b8290610dce565b6040805180820190915260088152676c616e677561676560c01b602082015261093a908290610db0565b604083015161095190801561090957610909611815565b604080518082019091526006815265736f7572636560d01b6020820152610979908290610db0565b6060830151610989908290610db0565b60a08301515115610a1d576040805180820190915260048152636172677360e01b60208201526109ba908290610db0565b6109c381610e07565b60005b8360a0015151811015610a1357610a038460a0015182815181106109ec576109ec611620565b602002602001015183610db090919063ffffffff16565b610a0c81611841565b90506109c6565b50610a1d81610e2b565b60808301515115610ae157600083602001516002811115610a4057610a40611815565b03610a5e5760405163a80d31f760e01b815260040160405180910390fd5b60408051808201909152600f81526e39b2b1b932ba39a637b1b0ba34b7b760891b6020820152610a8f908290610db0565b610aa88360200151600281111561090957610909611815565b6040805180820190915260078152667365637265747360c81b6020820152610ad1908290610db0565b6080830151610ae1908290610e49565b60c08301515115610b7a5760408051808201909152600981526862797465734172677360b81b6020820152610b17908290610db0565b610b2081610e07565b60005b8360c0015151811015610b7057610b608460c001518281518110610b4957610b49611620565b602002602001015183610e4990919063ffffffff16565b610b6981611841565b9050610b23565b50610b7a81610e2b565b515192915050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663461d27628688600188886040518663ffffffff1660e01b8152600401610bda95949392919061185a565b6020604051808303816000875af1158015610bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1d91906118a3565b60405190915081907f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db890600090a295945050505050565b60408051600180825281830190925260609160009190816020015b6060815260200190600190039081610c6f5790505090506040518060400160405280601381526020017214dd5cdd185a5b98589b1948141c9bd91d58dd606a1b81525081600081518110610cc557610cc5611620565b602090810291909101015292915050565b6040805160018082528183019092526060916000919060208083019080368337019050509050605581600081518110610cc557610cc5611620565b8051600003610d33576040516322ce3edd60e01b815260040160405180910390fd5b83836002811115610d4657610d46611815565b90816002811115610d5957610d59611815565b90525060408401828015610d6f57610d6f611815565b90818015610d7f57610d7f611815565b9052506060909301929092525050565b610d976112a1565b8051610da39083610e56565b5060006020820152919050565b610dbd8260038351610ed0565b8151610dc99082610fef565b505050565b8151610ddb9060c2611017565b5061084b8282604051602001610df391815260200190565b604051602081830303815290604052610e49565b610e12816004611080565b600181602001818151610e2591906118bc565b90525050565b610e36816007611080565b600181602001818151610e2591906118cf565b610dbd8260028351610ed0565b604080518082019091526060815260006020820152610e766020836118e2565b15610e9e57610e866020836118e2565b610e919060206118cf565b610e9b90836118bc565b91505b602080840183905260405180855260008152908184010181811015610ec257600080fd5b604052508290505b92915050565b6017816001600160401b031611610efc578251610ef69060e0600585901b168317611017565b50505050565b60ff816001600160401b031611610f3c578251610f24906018611fe0600586901b1617611017565b508251610ef6906001600160401b0383166001611097565b61ffff816001600160401b031611610f7d578251610f65906019611fe0600586901b1617611017565b508251610ef6906001600160401b0383166002611097565b63ffffffff816001600160401b031611610fc0578251610fa890601a611fe0600586901b1617611017565b508251610ef6906001600160401b0383166004611097565b8251610fd790601b611fe0600586901b1617611017565b508251610ef6906001600160401b0383166008611097565b6040805180820190915260608152600060208201526110108383845161111c565b9392505050565b604080518082019091526060815260006020820152825151600061103c8260016118bc565b90508460200151821061105d5761105d85611058836002611904565b6111ed565b8451602083820101858153508051821115611076578181525b5093949350505050565b8151610dc990601f611fe0600585901b1617611017565b60408051808201909152606081526000602082015283515160006110bb82856118bc565b905085602001518111156110d8576110d886611058836002611904565b600060016110e8866101006119ff565b6110f291906118cf565b90508651828101878319825116178152508051831115611110578281525b50959695505050505050565b604080518082019091526060815260006020820152825182111561113f57600080fd5b835151600061114e84836118bc565b9050856020015181111561116b5761116b86611058836002611904565b855180518382016020019160009180851115611185578482525b505050602086015b602086106111c557805182526111a46020836118bc565b91506111b16020826118bc565b90506111be6020876118cf565b955061118d565b51815160001960208890036101000a0190811690199190911617905250849150509392505050565b81516111f98383610e56565b50610ef68382610fef565b82805482825590600052602060002090810192821561124a579160200282015b8281111561124a578251829061123a9082611684565b5091602001919060010190611224565b506112569291506112d6565b5090565b828054828255906000526020600020908101928215611295579160200282015b8281111561129557825182559160200191906001019061127a565b506112569291506112f3565b60405180604001604052806112c9604051806040016040528060608152602001600081525090565b8152602001600081525090565b808211156112565760006112ea8282611308565b506001016112d6565b5b8082111561125657600081556001016112f4565b508054611314906115e6565b6000825580601f10611324575050565b601f01602090049060005260206000209081019061134291906112f3565b50565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261136c57600080fd5b81356001600160401b038082111561138657611386611345565b604051601f8301601f19908116603f011681019082821181831017156113ae576113ae611345565b816040528381528660208588010111156113c757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000606084860312156113fc57600080fd5b8335925060208401356001600160401b038082111561141a57600080fd5b6114268783880161135b565b9350604086013591508082111561143c57600080fd5b506114498682870161135b565b9150509250925092565b6000806040838503121561146657600080fd5b82356001600160a01b038116811461147d57600080fd5b946020939093013593505050565b60006020828403121561149d57600080fd5b813563ffffffff8116811461101057600080fd5b6000602082840312156114c357600080fd5b5035919050565b6000815180845260005b818110156114f0576020818501810151868301820152016114d4565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b0385168152608060208201819052600090611534908301866114ca565b6040830194909452506060015292915050565b6000806040838503121561155a57600080fd5b82356001600160401b038082111561157157600080fd5b61157d8683870161135b565b9350602085013591508082111561159357600080fd5b506115a08582860161135b565b9150509250929050565b6000602082840312156115bc57600080fd5b81356001600160401b038116811461101057600080fd5b60208152600061101060208301846114ca565b600181811c908216806115fa57607f821691505b60208210810361161a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b601f821115610dc957600081815260208120601f850160051c8101602086101561165d5750805b601f850160051c820191505b8181101561167c57828155600101611669565b505050505050565b81516001600160401b0381111561169d5761169d611345565b6116b1816116ab84546115e6565b84611636565b602080601f8311600181146116e657600084156116ce5750858301515b600019600386901b1c1916600185901b17855561167c565b600085815260208120601f198616915b82811015611715578886015182559484019460019091019084016116f6565b50858210156117335787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000602080830181845280855480835260408601915060059250604081841b8701016000888152858120815b8481101561180657603f198a850301865282825461178c816115e6565b808752600182811680156117a757600181146117c0576117ef565b60ff198416898e01528215158c1b89018d0194506117ef565b8688528c8820885b848110156117e75781548f828d01015283820191508e810190506117c8565b8a018e019550505b50988b01989296505050919091019060010161176f565b50919998505050505050505050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016118535761185361182b565b5060010190565b6001600160401b038616815260a06020820152600061187c60a08301876114ca565b61ffff9590951660408301525063ffffffff92909216606083015260809091015292915050565b6000602082840312156118b557600080fd5b5051919050565b80820180821115610eca57610eca61182b565b81810381811115610eca57610eca61182b565b6000826118ff57634e487b7160e01b600052601260045260246000fd5b500690565b8082028115828204841417610eca57610eca61182b565b600181815b8085111561195657816000190482111561193c5761193c61182b565b8085161561194957918102915b93841c9390800290611920565b509250929050565b60008261196d57506001610eca565b8161197a57506000610eca565b8160018114611990576002811461199a576119b6565b6001915050610eca565b60ff8411156119ab576119ab61182b565b50506001821b610eca565b5060208310610133831016604e8410600b84101617156119d9575081810a610eca565b6119e3838361191b565b80600019048211156119f7576119f761182b565b029392505050565b6000611010838361195e56fea26469706673582212201213cee8b02687402221cf4b3bd35d4af80c8a6b3555c8af90cad6c0372c3de564736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "details": "Either response or error parameter will be set, but never both.",
        "params": {
          "err": "Aggregated error either from the request's source code or from the execution pipeline.",
          "requestId": "The requestId returned by FunctionsClient.sendRequest().",
          "response": "Aggregated response from the request's source code."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "notice": "Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2099,
        "contract": "contracts/AIMarketplace.sol:AIMarketplace",
        "label": "recommendations",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(AIRecommendation)2094_storage)"
      },
      {
        "astId": 2104,
        "contract": "contracts/AIMarketplace.sol:AIMarketplace",
        "label": "userRecommendations",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 2106,
        "contract": "contracts/AIMarketplace.sol:AIMarketplace",
        "label": "subscriptionId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint64"
      },
      {
        "astId": 2109,
        "contract": "contracts/AIMarketplace.sol:AIMarketplace",
        "label": "gasLimit",
        "offset": 8,
        "slot": "2",
        "type": "t_uint32"
      },
      {
        "astId": 2111,
        "contract": "contracts/AIMarketplace.sol:AIMarketplace",
        "label": "donId",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 2114,
        "contract": "contracts/AIMarketplace.sol:AIMarketplace",
        "label": "bedrockSource",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_bytes32,t_struct(AIRecommendation)2094_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AIMarketplace.AIRecommendation)",
        "numberOfBytes": "32",
        "value": "t_struct(AIRecommendation)2094_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AIRecommendation)2094_storage": {
        "encoding": "inplace",
        "label": "struct AIMarketplace.AIRecommendation",
        "members": [
          {
            "astId": 2081,
            "contract": "contracts/AIMarketplace.sol:AIMarketplace",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2083,
            "contract": "contracts/AIMarketplace.sol:AIMarketplace",
            "label": "query",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2085,
            "contract": "contracts/AIMarketplace.sol:AIMarketplace",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2087,
            "contract": "contracts/AIMarketplace.sol:AIMarketplace",
            "label": "requestId",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 2090,
            "contract": "contracts/AIMarketplace.sol:AIMarketplace",
            "label": "recommendedProducts",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 2093,
            "contract": "contracts/AIMarketplace.sol:AIMarketplace",
            "label": "sustainabilityScores",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}