{
  "address": "0x09e9F0D5EfCb521Bf76B94E4Fa3c6499985E2878",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "EscrowManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "productId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "category",
          "type": "string"
        }
      ],
      "name": "ProductListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "productId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ProductPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "productId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "escrowId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "ProductPurchasedWithEscrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "productId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "ProductUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_category",
          "type": "string"
        }
      ],
      "name": "addCategory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "categories",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "categoryProducts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "escrowEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "escrowManager",
      "outputs": [
        {
          "internalType": "contract IEscrowManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_productIds",
          "type": "uint256[]"
        }
      ],
      "name": "getBatchProducts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "category",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "imageHash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadataHash",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSales",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalReviews",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "averageRating",
              "type": "uint256"
            }
          ],
          "internalType": "struct ProductRegistry.Product[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCategories",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEscrowConfig",
      "outputs": [
        {
          "internalType": "address",
          "name": "escrowManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "usdcTokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isEscrowEnabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarketplaceStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalProducts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalSellers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_activeProducts",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        }
      ],
      "name": "getProductEscrowDetails",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "escrowIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "buyers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8[]",
          "name": "statuses",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        }
      ],
      "name": "getProductEscrows",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        }
      ],
      "name": "getProductForAI",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "category",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rating",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_category",
          "type": "string"
        }
      ],
      "name": "getProductsByCategory",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_seller",
          "type": "address"
        }
      ],
      "name": "getSellerActiveEscrows",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_seller",
          "type": "address"
        }
      ],
      "name": "getSellerEscrowStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalEscrows",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "activeEscrows",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "completedEscrows",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "disputedEscrows",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_seller",
          "type": "address"
        }
      ],
      "name": "getSellerProducts",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_seller",
          "type": "address"
        }
      ],
      "name": "getSellerReputation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reputation",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isVerified",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "totalSales",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isEscrowAvailable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_category",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_imageHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_metadataHash",
          "type": "string"
        }
      ],
      "name": "listProduct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "moderators",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextProductId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "productEscrows",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "products",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "category",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "imageHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "metadataHash",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSales",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalReviews",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "averageRating",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        }
      ],
      "name": "purchaseProduct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        }
      ],
      "name": "purchaseWithEscrowETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "purchaseWithEscrowUSDC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        }
      ],
      "name": "registerSeller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sellerActiveEscrows",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sellerProducts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "sellers",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalProducts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSales",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reputation",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isVerified",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "joinedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        }
      ],
      "name": "setEscrowEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_escrowManager",
          "type": "address"
        }
      ],
      "name": "setEscrowManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_moderator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setModerator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        }
      ],
      "name": "setUSDCToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalProducts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSellers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_escrowId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_seller",
          "type": "address"
        }
      ],
      "name": "updateEscrowStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        }
      ],
      "name": "updateProduct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_productId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newRating",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reviewCount",
          "type": "uint256"
        }
      ],
      "name": "updateProductRating",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "validCategories",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_seller",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_verified",
          "type": "bool"
        }
      ],
      "name": "verifySeller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x920c4dba968e796a78bb65b649c84cfb71a6447afdc9474636c93f5cd859a7da",
  "receipt": {
    "to": null,
    "from": "0x822c480a0D437b6e6276D0AF69DBe7B19B65B599",
    "contractAddress": "0x09e9F0D5EfCb521Bf76B94E4Fa3c6499985E2878",
    "transactionIndex": 7,
    "gasUsed": "3352931",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xb84bbab02b68e889e97a1e8cfe41a5987053876ac784a192669476037d9c29dd",
    "transactionHash": "0x920c4dba968e796a78bb65b649c84cfb71a6447afdc9474636c93f5cd859a7da",
    "logs": [],
    "blockNumber": 42600030,
    "cumulativeGasUsed": "5396097",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "5043ce020989be5c2390dfac1ae9b274",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"EscrowManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"}],\"name\":\"ProductListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ProductPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"escrowId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ProductPurchasedWithEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"ProductUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_category\",\"type\":\"string\"}],\"name\":\"addCategory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"categories\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"categoryProducts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrowEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrowManager\",\"outputs\":[{\"internalType\":\"contract IEscrowManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_productIds\",\"type\":\"uint256[]\"}],\"name\":\"getBatchProducts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"imageHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSales\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReviews\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averageRating\",\"type\":\"uint256\"}],\"internalType\":\"struct ProductRegistry.Product[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCategories\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEscrowConfig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"escrowManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdcTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEscrowEnabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketplaceStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalProducts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSellers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_activeProducts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"}],\"name\":\"getProductEscrowDetails\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"escrowIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"buyers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"statuses\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"}],\"name\":\"getProductEscrows\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"}],\"name\":\"getProductForAI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rating\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_category\",\"type\":\"string\"}],\"name\":\"getProductsByCategory\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"getSellerActiveEscrows\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"getSellerEscrowStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalEscrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeEscrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"completedEscrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disputedEscrows\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"getSellerProducts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"getSellerReputation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reputation\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalSales\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEscrowAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_category\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_imageHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metadataHash\",\"type\":\"string\"}],\"name\":\"listProduct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextProductId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"productEscrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"products\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"imageHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSales\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReviews\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averageRating\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"purchaseProduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"}],\"name\":\"purchaseWithEscrowETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"purchaseWithEscrowUSDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"registerSeller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sellerActiveEscrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sellerProducts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellers\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalProducts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSales\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reputation\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"joinedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setEscrowEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_escrowManager\",\"type\":\"address\"}],\"name\":\"setEscrowManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_moderator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setModerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"}],\"name\":\"setUSDCToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalProducts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_escrowId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"updateEscrowStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"updateProduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newRating\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reviewCount\",\"type\":\"uint256\"}],\"name\":\"updateProductRating\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"validCategories\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_verified\",\"type\":\"bool\"}],\"name\":\"verifySeller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"addCategory(string)\":{\"details\":\"Add a new category (owner only)\"},\"getBatchProducts(uint256[])\":{\"details\":\"Batch get products (for efficient AI processing)\"},\"getCategories()\":{\"details\":\"Get all categories\"},\"getEscrowConfig()\":{\"details\":\"Get escrow configuration\"},\"getMarketplaceStats()\":{\"details\":\"Get marketplace stats for analytics\"},\"getProductEscrowDetails(uint256)\":{\"details\":\"Get detailed escrow information for a product\"},\"getProductEscrows(uint256)\":{\"details\":\"Get all escrows for a specific product\"},\"getProductForAI(uint256)\":{\"details\":\"Get product details for AI processing\"},\"getProductsByCategory(string)\":{\"details\":\"Get all products by category (for AI recommendations)\"},\"getSellerActiveEscrows(address)\":{\"details\":\"Get seller's active escrows\"},\"getSellerEscrowStats(address)\":{\"details\":\"Get seller's escrow statistics\"},\"getSellerProducts(address)\":{\"details\":\"Get seller's products\"},\"getSellerReputation(address)\":{\"details\":\"Get seller reputation for AI processing\"},\"isEscrowAvailable()\":{\"details\":\"Check if escrow functionality is available\"},\"listProduct(string,string,string,uint256,string,string)\":{\"details\":\"List a new product\"},\"purchaseProduct(uint256,address)\":{\"details\":\"Purchase a product (called by escrow contract)\"},\"purchaseWithEscrowETH(uint256)\":{\"details\":\"Purchase a product with ETH through escrow\"},\"purchaseWithEscrowUSDC(uint256,uint256)\":{\"details\":\"Purchase a product with USDC through escrow\"},\"registerSeller(string,string)\":{\"details\":\"Register as a seller\"},\"setEscrowEnabled(bool)\":{\"details\":\"Enable/disable escrow functionality (owner only)\"},\"setEscrowManager(address)\":{\"details\":\"Set EscrowManager address (owner only)\"},\"setModerator(address,bool)\":{\"details\":\"Add/remove moderator (owner only)\"},\"setUSDCToken(address)\":{\"details\":\"Set USDC token address (owner only)\"},\"updateEscrowStatus(uint256,uint256,address)\":{\"details\":\"Update escrow tracking when escrow is resolved (EscrowManager only)\"},\"updateProduct(uint256,uint256,bool)\":{\"details\":\"Update product price and status\"},\"updateProductRating(uint256,uint256,uint256)\":{\"details\":\"Update product rating (called by reputation system)\"},\"verifySeller(address,bool)\":{\"details\":\"Verify a seller (moderator only)\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/ProductRegistry.sol\":\"ProductRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/core/ProductRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title ProductRegistry\\n * @dev Core contract for listing products in the AI-powered marketplace\\n * @author AI Marketplace Team\\n */\\ninterface IEscrowManager {\\n    function createEscrowETH(uint256 _productId) external payable returns (uint256);\\n    function createEscrowUSDC(uint256 _productId, uint256 _amount) external returns (uint256);\\n    function getEscrow(uint256 _escrowId) external view returns (\\n        uint256 id,\\n        address buyer,\\n        address seller,\\n        uint256 productId,\\n        uint256 amount,\\n        address token,\\n        uint8 status,\\n        uint256 createdAt,\\n        uint256 disputeId,\\n        uint64 sourceChainSelector,\\n        bool isActive\\n    );\\n    function getUserEscrows(address _user) external view returns (uint256[] memory);\\n    function getSellerEscrows(address _seller) external view returns (uint256[] memory);\\n}\\n\\ncontract ProductRegistry is ReentrancyGuard {\\n    // Events\\n    event ProductListed(\\n        uint256 indexed productId,\\n        address indexed seller,\\n        string name,\\n        uint256 price,\\n        string category\\n    );\\n    \\n    event ProductUpdated(\\n        uint256 indexed productId,\\n        uint256 newPrice,\\n        bool isActive\\n    );\\n    \\n    event ProductPurchased(\\n        uint256 indexed productId,\\n        address indexed buyer,\\n        address indexed seller,\\n        uint256 price\\n    );\\n    \\n    event ProductPurchasedWithEscrow(\\n        uint256 indexed productId,\\n        uint256 indexed escrowId,\\n        address indexed buyer,\\n        address seller,\\n        uint256 price,\\n        address token\\n    );\\n    \\n    event EscrowManagerUpdated(\\n        address indexed oldManager,\\n        address indexed newManager\\n    );\\n\\n    // Structs\\n    struct Product {\\n        uint256 id;\\n        string name;\\n        string description;\\n        string category;\\n        uint256 price; // in wei\\n        address seller;\\n        string imageHash; // IPFS hash\\n        string metadataHash; // IPFS hash for additional data\\n        bool isActive;\\n        uint256 createdAt;\\n        uint256 totalSales;\\n        uint256 totalReviews;\\n        uint256 averageRating; // scaled by 100 (e.g., 450 = 4.5 stars)\\n    }\\n\\n    struct SellerProfile {\\n        string name;\\n        string description;\\n        uint256 totalProducts;\\n        uint256 totalSales;\\n        uint256 reputation; // scaled by 100\\n        bool isVerified;\\n        uint256 joinedAt;\\n    }\\n\\n    // State variables\\n    uint256 public nextProductId = 1;\\n    uint256 public totalProducts;\\n    uint256 public totalSellers;\\n    \\n    mapping(uint256 => Product) public products;\\n    mapping(address => SellerProfile) public sellers;\\n    mapping(address => uint256[]) public sellerProducts;\\n    mapping(string => uint256[]) public categoryProducts;\\n    \\n    // Product categories for AI recommendations\\n    string[] public categories;\\n    mapping(string => bool) public validCategories;\\n\\n    // Access control\\n    address public owner;\\n    mapping(address => bool) public moderators;\\n    \\n    // EscrowManager integration\\n    IEscrowManager public escrowManager;\\n    mapping(uint256 => uint256[]) public productEscrows; // productId => escrowIds\\n    mapping(address => uint256[]) public sellerActiveEscrows; // seller => escrowIds\\n    \\n    // Supported tokens for escrow\\n    IERC20 public usdcToken;\\n    bool public escrowEnabled = false;\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Not the owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyModerator() {\\n        require(moderators[msg.sender] || msg.sender == owner, \\\"Not authorized\\\");\\n        _;\\n    }\\n\\n    modifier onlySeller(uint256 _productId) {\\n        require(products[_productId].seller == msg.sender, \\\"Not the seller\\\");\\n        _;\\n    }\\n\\n    modifier validProduct(uint256 _productId) {\\n        require(_productId > 0 && _productId < nextProductId, \\\"Invalid product ID\\\");\\n        require(products[_productId].isActive, \\\"Product not active\\\");\\n        _;\\n    }\\n    \\n    modifier onlyEscrowManager() {\\n        require(msg.sender == address(escrowManager), \\\"Only EscrowManager\\\");\\n        _;\\n    }\\n    \\n    modifier whenEscrowEnabled() {\\n        require(escrowEnabled && address(escrowManager) != address(0), \\\"Escrow not enabled\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        owner = msg.sender;\\n        \\n        // Initialize default categories for AI recommendations\\n        _addCategory(\\\"Electronics\\\");\\n        _addCategory(\\\"Clothing\\\");\\n        _addCategory(\\\"Books\\\");\\n        _addCategory(\\\"Home & Garden\\\");\\n        _addCategory(\\\"Sports\\\");\\n        _addCategory(\\\"Beauty\\\");\\n        _addCategory(\\\"Automotive\\\");\\n        _addCategory(\\\"Digital\\\");\\n        \\n        console.log(\\\"ProductRegistry deployed by:\\\", msg.sender);\\n    }\\n\\n    /**\\n     * @dev Register as a seller\\n     */\\n    function registerSeller(\\n        string memory _name,\\n        string memory _description\\n    ) external {\\n        require(bytes(_name).length > 0, \\\"Name required\\\");\\n        \\n        if (sellers[msg.sender].joinedAt == 0) {\\n            totalSellers++;\\n        }\\n        \\n        sellers[msg.sender] = SellerProfile({\\n            name: _name,\\n            description: _description,\\n            totalProducts: sellers[msg.sender].totalProducts,\\n            totalSales: sellers[msg.sender].totalSales,\\n            reputation: sellers[msg.sender].reputation,\\n            isVerified: sellers[msg.sender].isVerified,\\n            joinedAt: sellers[msg.sender].joinedAt == 0 ? block.timestamp : sellers[msg.sender].joinedAt\\n        });\\n    }\\n\\n    /**\\n     * @dev List a new product\\n     */\\n    function listProduct(\\n        string memory _name,\\n        string memory _description,\\n        string memory _category,\\n        uint256 _price,\\n        string memory _imageHash,\\n        string memory _metadataHash\\n    ) external returns (uint256) {\\n        require(bytes(_name).length > 0, \\\"Product name required\\\");\\n        require(_price > 0, \\\"Price must be greater than 0\\\");\\n        require(validCategories[_category], \\\"Invalid category\\\");\\n        require(sellers[msg.sender].joinedAt > 0, \\\"Must register as seller first\\\");\\n\\n        uint256 productId = nextProductId++;\\n        \\n        products[productId] = Product({\\n            id: productId,\\n            name: _name,\\n            description: _description,\\n            category: _category,\\n            price: _price,\\n            seller: msg.sender,\\n            imageHash: _imageHash,\\n            metadataHash: _metadataHash,\\n            isActive: true,\\n            createdAt: block.timestamp,\\n            totalSales: 0,\\n            totalReviews: 0,\\n            averageRating: 0\\n        });\\n\\n        // Update mappings\\n        sellerProducts[msg.sender].push(productId);\\n        categoryProducts[_category].push(productId);\\n        sellers[msg.sender].totalProducts++;\\n        totalProducts++;\\n\\n        emit ProductListed(productId, msg.sender, _name, _price, _category);\\n        \\n        console.log(\\\"Product listed:\\\", productId, \\\"by:\\\", msg.sender);\\n        return productId;\\n    }\\n\\n    /**\\n     * @dev Update product price and status\\n     */\\n    function updateProduct(\\n        uint256 _productId,\\n        uint256 _newPrice,\\n        bool _isActive\\n    ) external onlySeller(_productId) {\\n        require(_newPrice > 0, \\\"Price must be greater than 0\\\");\\n        \\n        products[_productId].price = _newPrice;\\n        products[_productId].isActive = _isActive;\\n        \\n        emit ProductUpdated(_productId, _newPrice, _isActive);\\n    }\\n\\n    /**\\n     * @dev Purchase a product (called by escrow contract)\\n     */\\n    function purchaseProduct(\\n        uint256 _productId,\\n        address _buyer\\n    ) external validProduct(_productId) onlyEscrowManager {\\n        Product storage product = products[_productId];\\n        \\n        // Increment sales counters\\n        product.totalSales++;\\n        sellers[product.seller].totalSales++;\\n        \\n        emit ProductPurchased(_productId, _buyer, product.seller, product.price);\\n        \\n        console.log(\\\"Product purchased:\\\", _productId, \\\"by:\\\", _buyer);\\n    }\\n    \\n    /**\\n     * @dev Purchase a product with ETH through escrow\\n     */\\n    function purchaseWithEscrowETH(\\n        uint256 _productId\\n    ) external payable validProduct(_productId) whenEscrowEnabled nonReentrant returns (uint256) {\\n        require(msg.value > 0, \\\"ETH payment required\\\");\\n        \\n        Product memory product = products[_productId];\\n        require(product.seller != msg.sender, \\\"Cannot buy own product\\\");\\n        require(msg.value >= product.price, \\\"Insufficient payment\\\");\\n        \\n        // Create escrow through EscrowManager\\n        uint256 escrowId = escrowManager.createEscrowETH{value: msg.value}(_productId);\\n        \\n        // Track escrow\\n        productEscrows[_productId].push(escrowId);\\n        sellerActiveEscrows[product.seller].push(escrowId);\\n        \\n        emit ProductPurchasedWithEscrow(\\n            _productId,\\n            escrowId,\\n            msg.sender,\\n            product.seller,\\n            product.price,\\n            address(0) // ETH\\n        );\\n        \\n        console.log(\\\"Product purchased with ETH escrow:\\\", _productId, \\\"escrow:\\\", escrowId);\\n        return escrowId;\\n    }\\n    \\n    /**\\n     * @dev Purchase a product with USDC through escrow\\n     */\\n    function purchaseWithEscrowUSDC(\\n        uint256 _productId,\\n        uint256 _amount\\n    ) external validProduct(_productId) whenEscrowEnabled nonReentrant returns (uint256) {\\n        require(_amount > 0, \\\"USDC payment required\\\");\\n        require(address(usdcToken) != address(0), \\\"USDC not configured\\\");\\n        \\n        Product memory product = products[_productId];\\n        require(product.seller != msg.sender, \\\"Cannot buy own product\\\");\\n        require(_amount >= product.price, \\\"Insufficient payment\\\");\\n        \\n        // Transfer USDC from buyer to this contract, then approve EscrowManager\\n        usdcToken.transferFrom(msg.sender, address(this), _amount);\\n        usdcToken.approve(address(escrowManager), _amount);\\n        \\n        // Create escrow through EscrowManager\\n        uint256 escrowId = escrowManager.createEscrowUSDC(_productId, _amount);\\n        \\n        // Track escrow\\n        productEscrows[_productId].push(escrowId);\\n        sellerActiveEscrows[product.seller].push(escrowId);\\n        \\n        emit ProductPurchasedWithEscrow(\\n            _productId,\\n            escrowId,\\n            msg.sender,\\n            product.seller,\\n            product.price,\\n            address(usdcToken)\\n        );\\n        \\n        console.log(\\\"Product purchased with USDC escrow:\\\", _productId, \\\"escrow:\\\", escrowId);\\n        return escrowId;\\n    }\\n\\n    /**\\n     * @dev Add a new category (owner only)\\n     */\\n    function addCategory(string memory _category) external onlyOwner {\\n        _addCategory(_category);\\n    }\\n\\n    function _addCategory(string memory _category) internal {\\n        require(!validCategories[_category], \\\"Category already exists\\\");\\n        validCategories[_category] = true;\\n        categories.push(_category);\\n    }\\n\\n    /**\\n     * @dev Update product rating (called by reputation system)\\n     */\\n    function updateProductRating(\\n        uint256 _productId,\\n        uint256 _newRating,\\n        uint256 _reviewCount\\n    ) external onlyModerator validProduct(_productId) {\\n        products[_productId].averageRating = _newRating;\\n        products[_productId].totalReviews = _reviewCount;\\n    }\\n\\n    /**\\n     * @dev Verify a seller (moderator only)\\n     */\\n    function verifySeller(address _seller, bool _verified) external onlyModerator {\\n        sellers[_seller].isVerified = _verified;\\n    }\\n\\n    /**\\n     * @dev Add/remove moderator (owner only)\\n     */\\n    function setModerator(address _moderator, bool _status) external onlyOwner {\\n        moderators[_moderator] = _status;\\n    }\\n    \\n    /**\\n     * @dev Set EscrowManager address (owner only)\\n     */\\n    function setEscrowManager(address _escrowManager) external onlyOwner {\\n        require(_escrowManager != address(0), \\\"Invalid escrow manager address\\\");\\n        \\n        address oldManager = address(escrowManager);\\n        escrowManager = IEscrowManager(_escrowManager);\\n        \\n        emit EscrowManagerUpdated(oldManager, _escrowManager);\\n        console.log(\\\"EscrowManager updated to:\\\", _escrowManager);\\n    }\\n    \\n    /**\\n     * @dev Set USDC token address (owner only)\\n     */\\n    function setUSDCToken(address _usdcToken) external onlyOwner {\\n        require(_usdcToken != address(0), \\\"Invalid USDC token address\\\");\\n        usdcToken = IERC20(_usdcToken);\\n        console.log(\\\"USDC token set to:\\\", _usdcToken);\\n    }\\n    \\n    /**\\n     * @dev Enable/disable escrow functionality (owner only)\\n     */\\n    function setEscrowEnabled(bool _enabled) external onlyOwner {\\n        escrowEnabled = _enabled;\\n        console.log(\\\"Escrow enabled:\\\", _enabled);\\n    }\\n    \\n    /**\\n     * @dev Update escrow tracking when escrow is resolved (EscrowManager only)\\n     */\\n    function updateEscrowStatus(\\n        uint256 _productId,\\n        uint256 _escrowId,\\n        address _seller\\n    ) external onlyEscrowManager {\\n        // Remove from seller's active escrows\\n        uint256[] storage sellerEscrows = sellerActiveEscrows[_seller];\\n        for (uint256 i = 0; i < sellerEscrows.length; i++) {\\n            if (sellerEscrows[i] == _escrowId) {\\n                sellerEscrows[i] = sellerEscrows[sellerEscrows.length - 1];\\n                sellerEscrows.pop();\\n                break;\\n            }\\n        }\\n        \\n        console.log(\\\"Escrow status updated:\\\", _escrowId);\\n    }\\n\\n    // View functions for AI and frontend\\n\\n    /**\\n     * @dev Get all products by category (for AI recommendations)\\n     */\\n    function getProductsByCategory(string memory _category) \\n        external \\n        view \\n        returns (uint256[] memory) \\n    {\\n        return categoryProducts[_category];\\n    }\\n\\n    /**\\n     * @dev Get seller's products\\n     */\\n    function getSellerProducts(address _seller) \\n        external \\n        view \\n        returns (uint256[] memory) \\n    {\\n        return sellerProducts[_seller];\\n    }\\n\\n    /**\\n     * @dev Get all categories\\n     */\\n    function getCategories() external view returns (string[] memory) {\\n        return categories;\\n    }\\n\\n    /**\\n     * @dev Get product details for AI processing\\n     */\\n    function getProductForAI(uint256 _productId) \\n        external \\n        view \\n        returns (\\n            string memory name,\\n            string memory category,\\n            uint256 price,\\n            uint256 rating,\\n            address seller,\\n            bool isActive\\n        ) \\n    {\\n        Product memory product = products[_productId];\\n        return (\\n            product.name,\\n            product.category,\\n            product.price,\\n            product.averageRating,\\n            product.seller,\\n            product.isActive\\n        );\\n    }\\n\\n    /**\\n     * @dev Get seller reputation for AI processing\\n     */\\n    function getSellerReputation(address _seller) \\n        external \\n        view \\n        returns (uint256 reputation, bool isVerified, uint256 totalSales) \\n    {\\n        SellerProfile memory seller = sellers[_seller];\\n        return (seller.reputation, seller.isVerified, seller.totalSales);\\n    }\\n\\n    /**\\n     * @dev Batch get products (for efficient AI processing)\\n     */\\n    function getBatchProducts(uint256[] calldata _productIds)\\n        external\\n        view\\n        returns (Product[] memory)\\n    {\\n        Product[] memory batchProducts = new Product[](_productIds.length);\\n        for (uint256 i = 0; i < _productIds.length; i++) {\\n            batchProducts[i] = products[_productIds[i]];\\n        }\\n        return batchProducts;\\n    }\\n\\n    /**\\n     * @dev Get marketplace stats for analytics\\n     */\\n    function getMarketplaceStats() \\n        external \\n        view \\n        returns (\\n            uint256 _totalProducts,\\n            uint256 _totalSellers,\\n            uint256 _activeProducts\\n        ) \\n    {\\n        uint256 activeCount = 0;\\n        for (uint256 i = 1; i < nextProductId; i++) {\\n            if (products[i].isActive) {\\n                activeCount++;\\n            }\\n        }\\n        \\n        return (totalProducts, totalSellers, activeCount);\\n    }\\n    \\n    // Escrow-related view functions\\n    \\n    /**\\n     * @dev Get all escrows for a specific product\\n     */\\n    function getProductEscrows(uint256 _productId) \\n        external \\n        view \\n        returns (uint256[] memory) \\n    {\\n        return productEscrows[_productId];\\n    }\\n    \\n    /**\\n     * @dev Get seller's active escrows\\n     */\\n    function getSellerActiveEscrows(address _seller) \\n        external \\n        view \\n        returns (uint256[] memory) \\n    {\\n        return sellerActiveEscrows[_seller];\\n    }\\n    \\n    /**\\n     * @dev Get detailed escrow information for a product\\n     */\\n    function getProductEscrowDetails(uint256 _productId) \\n        external \\n        view \\n        returns (\\n            uint256[] memory escrowIds,\\n            address[] memory buyers,\\n            uint256[] memory amounts,\\n            uint8[] memory statuses\\n        ) \\n    {\\n        require(address(escrowManager) != address(0), \\\"EscrowManager not set\\\");\\n        \\n        uint256[] memory productEscrowIds = productEscrows[_productId];\\n        uint256 length = productEscrowIds.length;\\n        \\n        escrowIds = new uint256[](length);\\n        buyers = new address[](length);\\n        amounts = new uint256[](length);\\n        statuses = new uint8[](length);\\n        \\n        for (uint256 i = 0; i < length; i++) {\\n            uint256 escrowId = productEscrowIds[i];\\n            escrowIds[i] = escrowId;\\n            \\n            (\\n                ,\\n                address buyer,\\n                ,\\n                ,\\n                uint256 amount,\\n                ,\\n                uint8 status,\\n                ,\\n                ,\\n                ,\\n                \\n            ) = escrowManager.getEscrow(escrowId);\\n            \\n            buyers[i] = buyer;\\n            amounts[i] = amount;\\n            statuses[i] = status;\\n        }\\n        \\n        return (escrowIds, buyers, amounts, statuses);\\n    }\\n    \\n    /**\\n     * @dev Get seller's escrow statistics\\n     */\\n    function getSellerEscrowStats(address _seller) \\n        external \\n        view \\n        returns (\\n            uint256 totalEscrows,\\n            uint256 activeEscrows,\\n            uint256 completedEscrows,\\n            uint256 disputedEscrows\\n        ) \\n    {\\n        require(address(escrowManager) != address(0), \\\"EscrowManager not set\\\");\\n        \\n        uint256[] memory products = sellerProducts[_seller];\\n        \\n        // Count escrows across all seller's products\\n        for (uint256 i = 0; i < products.length; i++) {\\n            uint256[] memory escrowIds = productEscrows[products[i]];\\n            totalEscrows += escrowIds.length;\\n            \\n            for (uint256 j = 0; j < escrowIds.length; j++) {\\n                (\\n                    ,\\n                    ,\\n                    ,\\n                    ,\\n                    ,\\n                    ,\\n                    uint8 status,\\n                    ,\\n                    ,\\n                    ,\\n                    \\n                ) = escrowManager.getEscrow(escrowIds[j]);\\n                \\n                if (status == 0) { // Created\\n                    activeEscrows++;\\n                } else if (status == 1) { // Delivered\\n                    completedEscrows++;\\n                } else if (status == 2) { // Disputed\\n                    disputedEscrows++;\\n                }\\n            }\\n        }\\n        \\n        return (totalEscrows, activeEscrows, completedEscrows, disputedEscrows);\\n    }\\n    \\n    /**\\n     * @dev Check if escrow functionality is available\\n     */\\n    function isEscrowAvailable() external view returns (bool) {\\n        return escrowEnabled && address(escrowManager) != address(0);\\n    }\\n    \\n    /**\\n     * @dev Get escrow configuration\\n     */\\n    function getEscrowConfig() \\n        external \\n        view \\n        returns (\\n            address escrowManagerAddress,\\n            address usdcTokenAddress,\\n            bool isEscrowEnabled\\n        ) \\n    {\\n        return (address(escrowManager), address(usdcToken), escrowEnabled);\\n    }\\n}\",\"keccak256\":\"0xf31595b4970812f5af26714a65a79f7816703e4019eef4706bbe71911106d413\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c9081630384a08f146128ac575080630f5a9d01146127eb57806311eac855146127c257806314d0f1ba1461278357806321afc349146125f7578063273ef3881461252d5780632bedc5b1146124ed5780632d78b750146121de5780632e0dcbf7146120bd578063318fd93d14611f415780633ee2b01d14611eef5780633f54a09714611ebe5780634db0412c14611dd65780634de91a6314611db857806354bed0f214611d6a57806361501f6b14611c315780636d3f4b7a14611c135780636d47ab7214611b675780636e51d9cf146118a657806370a115e81461182f5780637acc0b20146117055780637dc6e2851461169c578063812d966a146116235780638da5cb5b146115fa5780638f38cc7b1461156057806393082169146112cd5780639b9d326d146112af578063a8b27ef914611244578063b7c8b78a1461114e578063be630bd2146110d6578063c12255c4146110ad578063c1302b3414611063578063c6cdbe5e14611002578063cd1ed5d214610c1c578063d062a14e14610bdb578063d1be75f614610b34578063db15c93c14610b0e578063e1111299146108c6578063e6a93e1614610837578063f050084314610791578063f0dae80c14610739578063f881f000146106115763ff9d6d56146101f857600080fd5b346104f65761020636612ad7565b81151580610606575b61021890612e06565b816000526020916004835261023760ff60086040600020015416612e47565b60ff600f5460a01c16806105f2575b61024f90612ec9565b610257612fb5565b81156105b557600f546001600160a01b0390811690811561057a57826000526004855260406000206000866040519461028f866129f1565b8354865261029f60018501612b70565b828701526102af60028501612b70565b60408701526102c060038501612b70565b606087015260048401549560808101968752610180600c876005880154169660a084019788526102f260068201612b70565b60c085015261030360078201612b70565b60e085015260ff60088201541615156101008501526009810154610120850152600a810154610140850152600b810154610160850152015491015261034d85855116331415612f0a565b61035a8651891015612f4f565b6064604051809481936323b872dd60e01b83523360048401523060248401528b60448401525af1801561050257610546575b5060008683600f5416604485600c5416604051948593849263095ea7b360e01b845260048401528b60248401525af190811561050257879161050e575b50600095604484600c541691604051988993849263d800dc8b60e01b84528a600485015260248401525af1948515610502576000956104c8575b509181849286946104bb96600052600d8952610423866040600020612dc4565b81815116600052600e895261043c866040600020612dc4565b5116915190600f54169060405192835287830152604082015282826000805160206132b283398151915260603394a46040519061047882612a43565b602382527f50726f6475637420707572636861736564207769746820555344432065736372868301526237bb9d60e91b60408301526104b5612f92565b916131fb565b6001600055604051908152f35b93919450918584813d83116104fb575b6104e28183612a5e565b810103126104f65792519390929181610403565b600080fd5b503d6104d8565b6040513d6000823e3d90fd5b9081813d831161053f575b6105238183612a5e565b810103126104f6576000956105388892612fd8565b50956103c9565b503d610519565b8681813d8311610573575b61055b8183612a5e565b810103126104f65761056c90612fd8565b503861038c565b503d610551565b60405162461bcd60e51b81526004810186905260136024820152721554d110c81b9bdd0818dbdb999a59dd5c9959606a1b6044820152606490fd5b60405162461bcd60e51b81526004810184905260156024820152741554d110c81c185e5b595b9d081c995c5d5a5c9959605a1b6044820152606490fd5b50600c546001600160a01b03161515610246565b50600154821061020f565b346104f65760403660031901126104f6576001600160a01b0360243581811691600435908383036104f65761072c938215158061072e575b61065290612e06565b82600052600460205261066f60ff60086040600020015416612e47565b61067e82600c54163314612e88565b826000526004602052827f89a8790373694cb8e6f5112d59a2e66f88c2be837274055780f8910dab3e695c60206004604060002095600a87016106c18154612c4a565b905560058701818154166000526005845260036040600020016106e48154612c4a565b90555416950154604051908152a4604051906106ff82612a28565b6012825271283937b23ab1ba10383ab931b430b9b2b21d60711b6020830152610726612de7565b9161325c565b005b506001548310610649565b346104f65760403660031901126104f657610752612993565b6001600160a01b03166000908152600e60205260409020805460243591908210156104f65760209161078391612b1e565b90546040519160031b1c8152f35b346104f65760603660031901126104f65760043533600052600b60205260ff604060002054168015610823575b6107c790613021565b80151580610818575b6107d990612e06565b8060005260046020526107f660ff60086040600020015416612e47565b60005260046020526040600020602435600c820155600b604435910155600080f35b5060015481106107d0565b50600a546001600160a01b031633146107be565b346104f6576020806003193601126104f6576001600160a01b03610859612993565b1660005260068152604060002090604051808383829554938481520190600052836000209260005b858282106108b05750505061089892500383612a5e565b6108ac604051928284938452830190612c16565b0390f35b8554845260019586019588955093019201610881565b346104f6576020806003193601126104f6576108e0612993565b600c546001600160a01b039081169260009283928391829190610904881515613089565b166000526006835260406000209460405180968791868254918281520191600052866000209060005b818110610af75750505090610943910387612a5e565b6000955b8051871015610adb5761095a8782613075565b51600052600d855260406000209260405180858882975493848152019060005288600020926000905b8a818310610ac15750505061099a92500385612a5e565b83518101809111610aab57946000925b8451841015610a92576109bd8486613075565b51604051633e8cf2cb60e11b815260048101919091526101609081816024818f5afa9081156105025760ff92600092610a5a575b50501680610a125750610a06610a0c91612c4a565b93612c4a565b926109aa565b9395909360018103610a315750610a2b610a0c91612c4a565b95612c4a565b909590600214610a45575b610a0c90612c4a565b96610a52610a0c91612c4a565b979050610a3c565b610a799250803d10610a8b575b610a718183612a5e565b810190613113565b50505050955050505050508c806109f1565b503d610a67565b959250925095610aa190612c4a565b9593909193610947565b634e487b7160e01b600052601160045260246000fd5b600192945082919386548152019401920187929391610983565b5060809492919360405194855284015260408301526060820152f35b825484528a9450928801926001928301920161092d565b346104f65760003660031901126104f657602060ff600f5460a01c166040519015158152f35b346104f65760203660031901126104f6576001600160a01b03610b55612993565b1660005260056020526060604060002060405190610b7282612a0d565b610b7b81612b70565b8252610b8960018201612b70565b602083015260028101546040830152600381015490818484015260048101549283608082015260c0600660ff6005850154161515938460a0850152015491015260405192835260208301526040820152f35b346104f65760003660031901126104f65760ff600f5460a01c1680610c08575b6020906040519015158152f35b50600c546001600160a01b03161515610bfb565b346104f65760c03660031901126104f6576001600160401b036004358181116104f657610c4d903690600401612a81565b906024358181116104f657610c66903690600401612a81565b916044358281116104f657610c7f903690600401612a81565b906084358381116104f657610c98903690600401612a81565b9260a4359081116104f657610cb1903690600401612a81565b90805115610fc557610cc66064351515612d79565b60ff6040516020818651610cdd8183858b016129a9565b81016009815203019020541615610f8d5733600052600560205260066040600020015415610f4857610ef27fc70903744648ba62771a2d2410274bf061b52210ea366530dd5bca16536c491e91602096600c610180600154988997610d4189612c4a565b60015560405191610d51836129f1565b8983528c83019587875260408401528a606084015260643560808401523360a084015260c083015260e0820152600161010082015242610120820152600061014082015260006101608201526000828201528760005260048b52610dc2604060002094825186555160018601612c59565b610dd3604082015160028601612c59565b610de4606082015160038601612c59565b6080810151600485015560a08101516005850180546001600160a01b0319166001600160a01b039290921691909117905560c0810151610e279060068601612c59565b610e3860e082015160078601612c59565b610e4c610100820151151560088601612d68565b6101208101516009850155610140810151600a850155610160810151600b85015501519101553360005260068752610e88846040600020612dc4565b610eb184604051898181610ea28b838151938492016129a9565b81016007815203019020612dc4565b33600052600587526002604060002001610ecb8154612c4a565b9055610ed8600254612c4a565b600255610f086040519283926060845260608401906129cc565b60643589840152828103604084015233966129cc565b0390a3610f40604051610f1a81612a28565b600f81526e283937b23ab1ba103634b9ba32b21d60891b84820152339083610726612de7565b604051908152f35b60405162461bcd60e51b815260206004820152601d60248201527f4d7573742072656769737465722061732073656c6c65722066697273740000006044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201526f496e76616c69642063617465676f727960801b6044820152606490fd5b60405162461bcd60e51b8152602060048201526015602482015274141c9bd91d58dd081b985b59481c995c5d5a5c9959605a1b6044820152606490fd5b346104f65760203660031901126104f6576004356008548110156104f65761102990612aed565b61104d576110396108ac91612b70565b6040519182916020835260208301906129cc565b634e487b7160e01b600052600060045260246000fd5b346104f65760403660031901126104f65761107c612993565b6001600160a01b03166000908152600660205260409020805460243591908210156104f65760209161078391612b1e565b346104f65760003660031901126104f657600c546040516001600160a01b039091168152602090f35b346104f65760403660031901126104f65761072c6110f2612993565b6110fa612984565b9033600052600b60205260ff60406000205416801561113a575b61111d90613021565b60018060a01b031660005260056020526005604060002001612d68565b50600a546001600160a01b03163314611114565b346104f65760203660031901126104f657611167612993565b600a546001600160a01b0391906111819083163314612fe5565b81811680156111ff57600c80546001600160a01b03198116831790915561072c93167f638c992bef3bdf51b5538654d5e489845fbc448ce25fe56e9a6db425bc94234b600080a36040516111d481612a28565b601981527822b9b1b937bba6b0b730b3b2b9103ab83230ba32b2103a379d60391b6020820152613198565b60405162461bcd60e51b815260206004820152601e60248201527f496e76616c696420657363726f77206d616e61676572206164647265737300006044820152606490fd5b346104f65760403660031901126104f6576004356001600160401b0381116104f657611274903690600401612a81565b61129060206024359281604051938285809451938492016129a9565b8101600781520301902080548210156104f65760209161078391612b1e565b346104f65760003660031901126104f6576020600254604051908152f35b346104f6576020806003193601126104f657600c546001600160a01b0390811691906112fa831515613089565b600435600052600d82526040600020916040519283828254918281520191600052826000209060005b81811061154c5750505083611339910384612a5e565b825192611345846130cd565b9361134f8161305e565b9561135d6040519788612a5e565b8187526113698261305e565b9484880192601f19809701368537611380816130cd565b9261138a8261305e565b956113986040519788612a5e565b8287526113a48361305e565b8789019901368a3760005b83811061145f57505050506113d39785604051998a9960808b5260808b0190612c16565b91898303828b015251918281520193916000905b82821061144257505050508161140591878694036040890152612c16565b918583036060870152519182815201929160005b82811061142857505050500390f35b835160ff1685528695509381019392810192600101611419565b8351811686528a99509487019492870192600191909101906113e7565b808b61147e6114759d9e98999a9c9d8386613075565b51938492613075565b5260405191633e8cf2cb60e11b835260048301526101608083602481885afa908115610502578c83918b6114ef968b8d6000926000956000996114fb575b5050956114e695938195936114e0936114d78460ff9b613075565b91169052613075565b52613075565b91169052612c4a565b9a99989695949a6113af565b889650869299506114d79450976114e09361152a6114e69997938b60ff9c903d10610a8b57610a718183612a5e565b505050509b955050959291505093979c955050509350939597819597506114bc565b825484529284019260019283019201611323565b346104f6576020806003193601126104f6576004356001600160401b0381116104f657816115956115a8923690600401612a81565b81604051938285809451938492016129a9565b8101600781520301902090604051808383829554938481520190600052836000209260005b858282106115e45750505061089892500383612a5e565b85548452600195860195889550930192016115cd565b346104f65760003660031901126104f657600a546040516001600160a01b039091168152602090f35b346104f65760003660031901126104f657600060018054905b81811061165f576060836002549060035460405192835260208301526040820152f35b80600052600460205260ff60086040600020015416611687575b61168290612c4a565b61163c565b9161169461168291612c4a565b929050611679565b346104f6576020806003193601126104f657600435600052600d8152604060002090604051808383829554938481520190600052836000209260005b858282106116ef5750505061089892500383612a5e565b85548452600195860195889550930192016116d8565b346104f65760203660031901126104f6576004356000526004602052604060002080546001820161173590612b70565b9161174260028201612b70565b61174e60038301612b70565b60048301546005840154909391906001600160a01b031661177160068401612b70565b61177d60078501612b70565b90600885015460ff1696600986015493600a87015495600b88015497600c0154986040519c8d9c8d528c6101a06020819201528d016117bb916129cc565b8c810360408e01526117cc916129cc565b8b810360608d01526117dd916129cc565b9160808b015260a08a015288810360c08a01526117f9916129cc565b87810360e089015261180a916129cc565b9415156101008701526101208601526101408501526101608401526101808301520390f35b346104f6576020806003193601126104f6576001600160a01b03611851612993565b16600052600e8152604060002090604051808383829554938481520190600052836000209260005b858282106118905750505061089892500383612a5e565b8554845260019586019588955093019201611879565b6020806003193601126104f65760043580151580611b5c575b6118c890612e06565b80600052600482526118e460ff60086040600020015416612e47565b60ff600f5460a01c1680611b48575b6118fc90612ec9565b611904612fb5565b3415611b0c5780602491600052600483526040600020604051611926816129f1565b8154815261193660018301612b70565b8582015261194660028301612b70565b604082015261195760038301612b70565b60608201526004820154916080820192835260018060a01b0391610180600c846005850154169360a0840194855261199160068201612b70565b60c08501526119a260078201612b70565b60e085015260ff60088201541615156101008501526009810154610120850152600a810154610140850152600b81015461016085015201549101526119ec82825116331415612f0a565b6119f98351341015612f4f565b8582600c541660405196878092635d17331f60e01b825288600483015234905af194851561050257600095611ad5575b5091839185936104bb95600052600d8852611a48856040600020612dc4565b81815116600052600e8852611a61856040600020612dc4565b51169051604051918252868201526000604082015282826000805160206132b283398151915260603394a460405190611a9982612a43565b602282527f50726f647563742070757263686173656420776974682045544820657363726f86830152613b9d60f11b60408301526104b5612f92565b93919450918584813d8311611b05575b611aef8183612a5e565b810103126104f6579251939092916104bb611a29565b503d611ae5565b60405162461bcd60e51b8152600481018390526014602482015273115512081c185e5b595b9d081c995c5d5a5c995960621b6044820152606490fd5b50600c546001600160a01b031615156118f3565b5060015481106118bf565b346104f65760203660031901126104f6576001600160a01b03611b88612993565b166000526005602052611be56040600020611ba281612b70565b90611baf60018201612b70565b6002820154916003810154600482015490611bf3600660ff6005860154169401549460405198899860e08a5260e08a01906129cc565b9088820360208a01526129cc565b94604087015260608601526080850152151560a084015260c08301520390f35b346104f65760003660031901126104f6576020600354604051908152f35b346104f65760203660031901126104f6576004356000526004602052611d436040600020604051611c61816129f1565b81548152611c7160018301612b70565b9160208201928352611c8560028201612b70565b6040830152611c9660038201612b70565b9260608301938452610180611d516004840154926080860193845260018060a01b0390816005870154169660a08101978852611cd460068801612b70565b60c0820152611ce560078801612b70565b60e0820152600c60ff600889015416151597886101008401526009810154610120840152600a810154610140840152600b8101546101608401520154948591015251965193519551169260405197889760c0895260c08901906129cc565b9087820360208901526129cc565b9360408601526060850152608084015260a08301520390f35b346104f65760203660031901126104f6576004356001600160401b0381116104f65760ff611da2602061159581943690600401612a81565b8101600981520301902054166040519015158152f35b346104f65760003660031901126104f6576020600154604051908152f35b346104f65760003660031901126104f657600854611df38161305e565b90611e016040519283612a5e565b80825260086000908152602091828401917ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3835b838310611e9c5750505050604051918083019381845251809452604083019360408160051b85010192916000955b828710611e705785850386f35b909192938280611e8c600193603f198a820301865288516129cc565b9601920196019592919092611e63565b6001868192611ead859a999a612b70565b815201920192019190959495611e35565b346104f657611ecc36612ad7565b90600052600d602052604060002080548210156104f65760209161078391612b1e565b346104f65760403660031901126104f65761072c611f0b612993565b611f13612984565b600a5490916001600160a01b0391611f2e9083163314612fe5565b16600052600b6020526040600020612d68565b346104f65760403660031901126104f6576001600160401b036004358181116104f657611f72903690600401612a81565b906024359081116104f657611f8b903690600401612a81565b81511561208857600690336000526005602052816040600020015415612075575b3360005260056020526120656040600020600281015460038201546004830154918660ff600586015416940154801560001461206b575061204742965b60405199611ff68b612a0d565b8a5260208a0190815260408a0192835260608a0193845260808a0194855260a08a01951515865260c08a0197885233600052600560205261203d60406000209a518b612c59565b5160018a01612c59565b51600288015551600387015551600486015551151560058501612d68565b51910155005b6120479096611fe9565b612080600354612c4a565b600355611fac565b60405162461bcd60e51b815260206004820152600d60248201526c13985b59481c995c5d5a5c9959609a1b6044820152606490fd5b346104f65760203660031901126104f6576004356001600160401b0381116104f6576120ed903690600401612a81565b61210260018060a01b03600a54163314612fe5565b60405160ff8251916020818186019461211c8183886129a9565b81016009815203019020541661219f576020612143916040518093819286519283916129a9565b600990820190815203019020805460ff19166001179055600854600160401b811015612189578060016121799201600855612aed565b91909161104d5761072c91612c59565b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260206004820152601760248201527643617465676f727920616c72656164792065786973747360481b6044820152606490fd5b346104f6576020806003193601126104f6576001600160401b03906004358281116104f657366023820112156104f65780600401359283116104f65760059260243682861b84018201116104f6576122358261305e565b926122436040519485612a5e565b828452601f196122528461305e565b018560005b82811061247c5750505060005b838110612388575050505060405191808301818452825180915281604082818701971b8601019301916000955b82871061229e5785850386f35b909192938280600192603f198982030185528751908151815261233f61232d6122ff6122ec6122da878701516101a0808a8901528701906129cc565b604087015186820360408801526129cc565b60608087015190868303908701526129cc565b6080808601519085015260a0888060a01b0381870151169085015260c08086015190858303908601526129cc565b60e084015183820360e08501526129cc565b9161010080820151151590830152610120808201519083015261014080820151908301526101608082015190830152610180809101519101529601920196019592919092612291565b808361247792891b84010135600052600487526040600020600c604051916123af836129f1565b805483526123bf60018201612b70565b8a8401526123cf60028201612b70565b60408401526123e060038201612b70565b6060840152600481015460808401528a8101546001600160a01b031660a084015261240d60068201612b70565b60c084015261241e60078201612b70565b60e084015260ff60088201541615156101008401526009810154610120840152600a810154610140840152600b81015461016084015201546101808201526124668288613075565b526124718187613075565b50612c4a565b612264565b604051612488816129f1565b6000815260608084830152806040830152808083015260006080830152600060a08301528060c083015260e082015260006101008201526000610120820152600061014082015260006101608201526000610180820152828289010152018690612257565b346104f65760003660031901126104f657606060018060a01b0360ff81600c541691600f54906040519384528116602084015260a01c1615156040820152f35b346104f65760203660031901126104f6576004358015158091036104f6576000809161256460018060a01b03600a54163314612fe5565b600f805460ff60a01b191660a083901b60ff60a01b161790556040519061258a82612a28565b600f82526e22b9b1b937bb9032b730b13632b21d60891b60208301526125e560405180926125d1602083019563c3b5563560e01b87526040602485015260648401906129cc565b90604483015203601f198101835282612a5e565b51906a636f6e736f6c652e6c6f675afa005b346104f65760603660031901126104f657602480356044356001600160a01b03818116918290036104f65761263190600c54163314612e88565b600052600e60205260406000209060005b82548082101561276e5782906126588386612b1e565b929054600393841b1c1461267657505061267190612c4a565b612642565b600094929193941991828201918211612759576126a66126996126bf9386612b1e565b905490871b1c9185612b1e565b90919082549060031b91821b91600019901b1916179055565b815480156127445793600095936125d193836125e594899801926126e38484612b1e565b81939154921b1b19169055555b604051906126fd82612a28565b601682527522b9b1b937bb9039ba30ba3ab9903ab83230ba32b21d60511b602083015260405193849260406020850197632d839cb360e21b895285015260648401906129cc565b85634e487b7160e01b60005260316004526000fd5b86634e487b7160e01b60005260116004526000fd5b5050600092908392506125e56125d1916126f0565b346104f65760203660031901126104f6576001600160a01b036127a4612993565b16600052600b602052602060ff604060002054166040519015158152f35b346104f65760003660031901126104f657600f546040516001600160a01b039091168152602090f35b346104f65760203660031901126104f657612804612993565b600a546001600160a01b039061281d9082163314612fe5565b811690811561286a5761072c9160018060a01b0319600f541617600f5560405161284681612a28565b60128152712aa9a221903a37b5b2b71039b2ba103a379d60711b6020820152613198565b60405162461bcd60e51b815260206004820152601a602482015279496e76616c6964205553444320746f6b656e206164647265737360301b6044820152606490fd5b346104f65760603660031901126104f6576004359060243590604435801515918282036104f6576000858152600460205260409020600501546001600160a01b031633036129515750916040916129447f60324991ffff0e71d85a7736fd4923c03b13bac11a892501a34358424621588394612929841515612d79565b86600052600460205260088560002085600482015501612d68565b82519182526020820152a2005b62461bcd60e51b815260206004820152600e60248201526d2737ba103a34329039b2b63632b960911b6044820152606490fd5b6024359081151582036104f657565b600435906001600160a01b03821682036104f657565b60005b8381106129bc5750506000910152565b81810151838201526020016129ac565b906020916129e5815180928185528580860191016129a9565b601f01601f1916010190565b6101a081019081106001600160401b0382111761218957604052565b60e081019081106001600160401b0382111761218957604052565b604081019081106001600160401b0382111761218957604052565b606081019081106001600160401b0382111761218957604052565b601f909101601f19168101906001600160401b0382119082101761218957604052565b81601f820112156104f6578035906001600160401b0382116121895760405192612ab5601f8401601f191660200185612a5e565b828452602083830101116104f657816000926020809301838601378301015290565b60409060031901126104f6576004359060243590565b600854811015612b0857600860005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b8054821015612b085760005260206000200190600090565b90600182811c92168015612b66575b6020831014612b5057565b634e487b7160e01b600052602260045260246000fd5b91607f1691612b45565b9060405191826000825492612b8484612b36565b908184526001948581169081600014612bf35750600114612bb0575b5050612bae92500383612a5e565b565b9093915060005260209081600020936000915b818310612bdb575050612bae93508201013880612ba0565b85548884018501529485019487945091830191612bc3565b915050612bae94506020925060ff191682840152151560051b8201013880612ba0565b90815180825260208080930193019160005b828110612c36575050505090565b835185529381019392810192600101612c28565b6000198114610aab5760010190565b81519192916001600160401b03811161218957612c768254612b36565b601f8111612d20575b50602080601f8311600114612cbc575081929394600092612cb1575b50508160011b916000199060031b1c1916179055565b015190503880612c9b565b90601f198316958460005282600020926000905b888210612d0857505083600195969710612cef575b505050811b019055565b015160001960f88460031b161c19169055388080612ce5565b80600185968294968601518155019501930190612cd0565b600083815260208120601f840160051c81019260208510612d5e575b601f0160051c01915b828110612d53575050612c7f565b818155600101612d45565b9092508290612d3c565b9060ff801983541691151516179055565b15612d8057565b60405162461bcd60e51b815260206004820152601c60248201527b05072696365206d7573742062652067726561746572207468616e20360241b6044820152606490fd5b80549190600160401b83101561218957826126a6916001612bae95018155612b1e565b60405190612df482612a28565b6003825262313c9d60e91b6020830152565b15612e0d57565b60405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a59081c1c9bd91d58dd08125160721b6044820152606490fd5b15612e4e57565b60405162461bcd60e51b815260206004820152601260248201527150726f64756374206e6f742061637469766560701b6044820152606490fd5b15612e8f57565b60405162461bcd60e51b815260206004820152601260248201527127b7363c9022b9b1b937bba6b0b730b3b2b960711b6044820152606490fd5b15612ed057565b60405162461bcd60e51b8152602060048201526012602482015271115cd8dc9bddc81b9bdd08195b98589b195960721b6044820152606490fd5b15612f1157565b60405162461bcd60e51b815260206004820152601660248201527510d85b9b9bdd08189d5e481bdddb881c1c9bd91d58dd60521b6044820152606490fd5b15612f5657565b60405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b6044820152606490fd5b60405190612f9f82612a28565b600782526632b9b1b937bb9d60c91b6020830152565b600260005414612fc6576002600055565b604051633ee5aeb560e01b8152600490fd5b519081151582036104f657565b15612fec57565b60405162461bcd60e51b815260206004820152600d60248201526c2737ba103a34329037bbb732b960991b6044820152606490fd5b1561302857565b60405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152606490fd5b6001600160401b0381116121895760051b60200190565b8051821015612b085760209160051b010190565b1561309057565b60405162461bcd60e51b8152602060048201526015602482015274115cd8dc9bddd3585b9859d95c881b9bdd081cd95d605a1b6044820152606490fd5b906130d78261305e565b6130e46040519182612a5e565b82815280926130f5601f199161305e565b0190602036910137565b51906001600160a01b03821682036104f657565b90816101609103126104f65780519161312e602083016130ff565b9161313b604082016130ff565b9160608201519160808101519161315460a083016130ff565b9160c081015160ff811681036104f6579160e0820151916101008101519161012082015160018060401b03811681036104f657610140613195919301612fd8565b90565b6000919082916131e860405180926131c9602083019563319af33360e01b87526040602485015260648401906129cc565b6001600160a01b0391909116604483015203601f198101835282612a5e565b51906a636f6e736f6c652e6c6f675afa50565b906131e8600094938594613248604051948593613231602086019863c67ea9d160e01b8a526080602488015260a48701906129cc565b9160448601526023198583030160648601526129cc565b90608483015203601f198101835282612a5e565b906131e86000949385946132926040519485936132316020860198631f118ca960e21b8a526080602488015260a48701906129cc565b6001600160a01b0391909116608483015203601f198101835282612a5e56fea13395aeadc65bb2d8d933462071557af3cad71cbb57d8b56ac2b5767531e609a264697066735822122086c660d471ae857806c79dfc4fa71d7b509360b80a0da86e12f71ccd68453b1464736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addCategory(string)": {
        "details": "Add a new category (owner only)"
      },
      "getBatchProducts(uint256[])": {
        "details": "Batch get products (for efficient AI processing)"
      },
      "getCategories()": {
        "details": "Get all categories"
      },
      "getEscrowConfig()": {
        "details": "Get escrow configuration"
      },
      "getMarketplaceStats()": {
        "details": "Get marketplace stats for analytics"
      },
      "getProductEscrowDetails(uint256)": {
        "details": "Get detailed escrow information for a product"
      },
      "getProductEscrows(uint256)": {
        "details": "Get all escrows for a specific product"
      },
      "getProductForAI(uint256)": {
        "details": "Get product details for AI processing"
      },
      "getProductsByCategory(string)": {
        "details": "Get all products by category (for AI recommendations)"
      },
      "getSellerActiveEscrows(address)": {
        "details": "Get seller's active escrows"
      },
      "getSellerEscrowStats(address)": {
        "details": "Get seller's escrow statistics"
      },
      "getSellerProducts(address)": {
        "details": "Get seller's products"
      },
      "getSellerReputation(address)": {
        "details": "Get seller reputation for AI processing"
      },
      "isEscrowAvailable()": {
        "details": "Check if escrow functionality is available"
      },
      "listProduct(string,string,string,uint256,string,string)": {
        "details": "List a new product"
      },
      "purchaseProduct(uint256,address)": {
        "details": "Purchase a product (called by escrow contract)"
      },
      "purchaseWithEscrowETH(uint256)": {
        "details": "Purchase a product with ETH through escrow"
      },
      "purchaseWithEscrowUSDC(uint256,uint256)": {
        "details": "Purchase a product with USDC through escrow"
      },
      "registerSeller(string,string)": {
        "details": "Register as a seller"
      },
      "setEscrowEnabled(bool)": {
        "details": "Enable/disable escrow functionality (owner only)"
      },
      "setEscrowManager(address)": {
        "details": "Set EscrowManager address (owner only)"
      },
      "setModerator(address,bool)": {
        "details": "Add/remove moderator (owner only)"
      },
      "setUSDCToken(address)": {
        "details": "Set USDC token address (owner only)"
      },
      "updateEscrowStatus(uint256,uint256,address)": {
        "details": "Update escrow tracking when escrow is resolved (EscrowManager only)"
      },
      "updateProduct(uint256,uint256,bool)": {
        "details": "Update product price and status"
      },
      "updateProductRating(uint256,uint256,uint256)": {
        "details": "Update product rating (called by reputation system)"
      },
      "verifySeller(address,bool)": {
        "details": "Verify a seller (moderator only)"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3975,
        "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 10529,
        "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
        "label": "nextProductId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 10531,
        "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
        "label": "totalProducts",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 10533,
        "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
        "label": "totalSellers",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 10538,
        "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
        "label": "products",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Product)10511_storage)"
      },
      {
        "astId": 10543,
        "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
        "label": "sellers",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(SellerProfile)10526_storage)"
      },
      {
        "astId": 10548,
        "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
        "label": "sellerProducts",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 10553,
        "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
        "label": "categoryProducts",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 10556,
        "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
        "label": "categories",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 10560,
        "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
        "label": "validCategories",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 10562,
        "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
        "label": "owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 10566,
        "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
        "label": "moderators",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10569,
        "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
        "label": "escrowManager",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IEscrowManager)10432"
      },
      {
        "astId": 10574,
        "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
        "label": "productEscrows",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 10579,
        "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
        "label": "sellerActiveEscrows",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 10582,
        "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
        "label": "usdcToken",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(IERC20)3238"
      },
      {
        "astId": 10585,
        "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
        "label": "escrowEnabled",
        "offset": 20,
        "slot": "15",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)3238": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IEscrowManager)10432": {
        "encoding": "inplace",
        "label": "contract IEscrowManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(SellerProfile)10526_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ProductRegistry.SellerProfile)",
        "numberOfBytes": "32",
        "value": "t_struct(SellerProfile)10526_storage"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Product)10511_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ProductRegistry.Product)",
        "numberOfBytes": "32",
        "value": "t_struct(Product)10511_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Product)10511_storage": {
        "encoding": "inplace",
        "label": "struct ProductRegistry.Product",
        "members": [
          {
            "astId": 10486,
            "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10488,
            "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 10490,
            "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 10492,
            "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
            "label": "category",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 10494,
            "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
            "label": "price",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10496,
            "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
            "label": "seller",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 10498,
            "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
            "label": "imageHash",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 10500,
            "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
            "label": "metadataHash",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 10502,
            "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
            "label": "isActive",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 10504,
            "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
            "label": "createdAt",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 10506,
            "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
            "label": "totalSales",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 10508,
            "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
            "label": "totalReviews",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 10510,
            "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
            "label": "averageRating",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(SellerProfile)10526_storage": {
        "encoding": "inplace",
        "label": "struct ProductRegistry.SellerProfile",
        "members": [
          {
            "astId": 10513,
            "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 10515,
            "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 10517,
            "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
            "label": "totalProducts",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10519,
            "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
            "label": "totalSales",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10521,
            "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
            "label": "reputation",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10523,
            "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
            "label": "isVerified",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 10525,
            "contract": "contracts/core/ProductRegistry.sol:ProductRegistry",
            "label": "joinedAt",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}