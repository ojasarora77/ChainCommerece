AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infrastructure for AI Marketplace Bedrock Agent with Analytics and Caching'

Parameters:
  ProjectName:
    Type: String
    Default: 'ai-marketplace'
    Description: 'Name of the project for resource naming'
  
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: ['dev', 'staging', 'prod']
    Description: 'Environment name'

Resources:
  # DynamoDB Table for Orders and Analytics
  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-orders-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: gsi1pk
          AttributeType: S
        - AttributeName: gsi1sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: gsi1pk
              KeyType: HASH
            - AttributeName: gsi1sk
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # DynamoDB Table for Analytics
  AnalyticsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-analytics-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: eventType
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: EventTypeIndex
          KeySchema:
            - AttributeName: eventType
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # S3 Bucket for Caching
  CacheBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-cache-${Environment}-${AWS::AccountId}'
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldCacheFiles
            Status: Enabled
            ExpirationInDays: 7
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # IAM Role for Lambda Function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-bedrock-lambda-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt OrdersTable.Arn
                  - !Sub '${OrdersTable.Arn}/index/*'
                  - !GetAtt AnalyticsTable.Arn
                  - !Sub '${AnalyticsTable.Arn}/index/*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub '${CacheBucket}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !GetAtt CacheBucket.Arn

  # Lambda Function for Bedrock Agent
  BedrockAgentFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-bedrock-agent-functions-${Environment}'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          ORDERS_TABLE: !Ref OrdersTable
          ANALYTICS_TABLE: !Ref AnalyticsTable
          CACHE_BUCKET: !Ref CacheBucket
          ENVIRONMENT: !Ref Environment
      Code:
        ZipFile: |
          // Placeholder code - replace with actual function code
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Function deployed successfully' })
            };
          };
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Lambda Permission for Bedrock Agent
  BedrockAgentInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BedrockAgentFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceAccount: !Ref AWS::AccountId

  # CloudWatch Log Group for Lambda
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${BedrockAgentFunction}'
      RetentionInDays: 14

Outputs:
  OrdersTableName:
    Description: 'Name of the Orders DynamoDB table'
    Value: !Ref OrdersTable
    Export:
      Name: !Sub '${ProjectName}-orders-table-${Environment}'

  AnalyticsTableName:
    Description: 'Name of the Analytics DynamoDB table'
    Value: !Ref AnalyticsTable
    Export:
      Name: !Sub '${ProjectName}-analytics-table-${Environment}'

  CacheBucketName:
    Description: 'Name of the Cache S3 bucket'
    Value: !Ref CacheBucket
    Export:
      Name: !Sub '${ProjectName}-cache-bucket-${Environment}'

  LambdaFunctionArn:
    Description: 'ARN of the Bedrock Agent Lambda function'
    Value: !GetAtt BedrockAgentFunction.Arn
    Export:
      Name: !Sub '${ProjectName}-lambda-arn-${Environment}'

  LambdaFunctionName:
    Description: 'Name of the Bedrock Agent Lambda function'
    Value: !Ref BedrockAgentFunction
    Export:
      Name: !Sub '${ProjectName}-lambda-name-${Environment}'
